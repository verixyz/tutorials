{"version":3,"file":"resolver.umd.js","sources":["../src/resolver.ts"],"sourcesContent":["import fetch from 'cross-fetch'\nimport { DIDDocument, DIDResolutionResult, DIDResolver, ParsedDID } from 'did-resolver'\n\nconst DOC_PATH = '/.well-known/did.json'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function get(url: string): Promise<any> {\n  const res = await fetch(url, { mode: 'cors' })\n  if (res.status >= 400) {\n    throw new Error(`Bad response ${res.statusText}`)\n  }\n  return res.json()\n}\n\nexport function getResolver(): Record<string, DIDResolver> {\n  async function resolve(did: string, parsed: ParsedDID): Promise<DIDResolutionResult> {\n    let err = null\n    let path = decodeURIComponent(parsed.id) + DOC_PATH\n    const id = parsed.id.split(':')\n    if (id.length > 1) {\n      path = id.map(decodeURIComponent).join('/') + '/did.json'\n    }\n\n    const url = `https://${path}`\n\n    const didDocumentMetadata = {}\n    let didDocument: DIDDocument | null = null\n\n    do {\n      try {\n        didDocument = await get(url)\n      } catch (error) {\n        err = `resolver_error: DID must resolve to a valid https URL containing a JSON document: ${error}`\n        break\n      }\n\n      // TODO: this excludes the use of query params\n      const docIdMatchesDid = didDocument?.id === did\n      if (!docIdMatchesDid) {\n        err = 'resolver_error: DID document id does not match requested did'\n        // break // uncomment this when adding more checks\n      }\n      // eslint-disable-next-line no-constant-condition\n    } while (false)\n\n    const contentType =\n      typeof didDocument?.['@context'] !== 'undefined' ? 'application/did+ld+json' : 'application/did+json'\n\n    if (err) {\n      return {\n        didDocument,\n        didDocumentMetadata,\n        didResolutionMetadata: {\n          error: 'notFound',\n          message: err,\n        },\n      }\n    } else {\n      return {\n        didDocument,\n        didDocumentMetadata,\n        didResolutionMetadata: { contentType },\n      }\n    }\n  }\n\n  return { web: resolve }\n}\n"],"names":["get","url","fetch","mode","res","status","Error","statusText","json","_settle","state","DOC_PATH","onRejected","e","result","getResolver","resolve","did","parsed","contentType","didDocument","err","didDocumentMetadata","didResolutionMetadata","error","message","path","decodeURIComponent","id","split","length","map","join","docIdMatchesDid","web"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;EAKA;QACeA,gBAAIC;;6BACCC,yBAAK,CAACD,GAAD,EAAM;EAAEE,MAAAA,IAAI,EAAE;EAAR,KAAN,kBAAjBC;EACN,UAAIA,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuB;EACrB,cAAM,IAAIC,KAAJ,iBAA0BF,GAAG,CAACG,YAA9B,CAAN;EACD;;EACD,aAAOH,GAAG,CAACI,IAAJ,EAAP;;EACD;;;;;;;;qBAwCO;;;;;;;;;;;;;mBAUDC,YAAA,KAAA,MAAA,OAAA;;;;eAIEC;;;;;;;;;;EA/DT,MAAMC,QAAQ,GAAG,uBAAjB;;;;;;;YAKMD;;;;;;;;;;;;;;;;;;;;;;;;;+BAuBcE;;;;iBAKdC;kBACAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAvBUC;UACCC,oBAAQC,KAAaC;;;;;;;EA8BlC,cAAMC,WAAW,GACf,wBAAOC,WAAP,qBAAO,aAAc,UAAd,CAAP,MAAqC,WAArC,GAAmD,yBAAnD,GAA+E,sBADjF;;cAGIC;EACF,iBAAO;EACLD,YAAAA,WADK;EAELE,YAAAA,mBAFK;EAGLC,YAAAA,qBAAqB,EAAE;EACrBC,cAAAA,KAAK,EAAE,UADc;EAErBC,cAAAA,OAAO,EAAEJ;EAFY;EAHlB,WAAP;;EASA,iBAAO;EACLD,YAAAA,WADK;EAELE,YAAAA,mBAFK;EAGLC,YAAAA,qBAAqB,EAAE;EAAEJ,cAAAA;EAAF;EAHlB,WAAP;;;;EA1CF,UAAIE,GAAG,GAAG,IAAV;EACA,UAAIK,IAAI,GAAGC,kBAAkB,CAACT,MAAM,CAACU,EAAR,CAAlB,GAAgCjB,QAA3C;EACA,YAAMiB,EAAE,GAAGV,MAAM,CAACU,EAAP,CAAUC,KAAV,CAAgB,GAAhB,CAAX;;EACA,UAAID,EAAE,CAACE,MAAH,GAAY,CAAhB,EAAmB;EACjBJ,QAAAA,IAAI,GAAGE,EAAE,CAACG,GAAH,CAAOJ,kBAAP,EAA2BK,IAA3B,CAAgC,GAAhC,IAAuC,WAA9C;EACD;;EAED,YAAM/B,GAAG,cAAcyB,MAAvB;EAEA,YAAMJ,mBAAmB,GAAG,EAA5B;EACA,UAAIF,WAAW,GAAuB,IAAtC;;uCAEG;EAAA;EAAA;EAAA;;EAQD;EACA,kBAAMa,eAAe,GAAG,kBAAAb,WAAW,SAAX,0BAAaQ,EAAb,MAAoBX,GAA5C;;EATC,gBAUG,CAACgB,eAVJ;EAWCZ,cAAAA,GAAG,GAAG,8DAAN,CAXD;EAAA;EAAA;EAAA;;EAAA,yCACG;EAAA,iCACkBrB,GAAG,CAACC,GAAD,CADrB;EACFmB,YAAAA,WAAW,OAAX;EADE;EAEH,SAHA,YAGQI,KAHR,EAGe;EACdH,UAAAA,GAAG,wFAAwFG,OAA3F;EADc;EAGf,SANA;;EAAA;EAeF;gCAAQ;;;;EAqBV;;;;;EAED,SAAO;EAAEU,IAAAA,GAAG,EAAElB;EAAP,GAAP;EACD;;;;;;;;"}