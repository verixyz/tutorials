import fetch from 'cross-fetch';

const DOC_PATH = '/.well-known/did.json'; // eslint-disable-next-line @typescript-eslint/no-explicit-any

async function get(url) {
  const res = await fetch(url, {
    mode: 'cors'
  });

  if (res.status >= 400) {
    throw new Error(`Bad response ${res.statusText}`);
  }

  return res.json();
}

function getResolver() {
  async function resolve(did, parsed) {
    var _didDocument2;

    let err = null;
    let path = decodeURIComponent(parsed.id) + DOC_PATH;
    const id = parsed.id.split(':');

    if (id.length > 1) {
      path = id.map(decodeURIComponent).join('/') + '/did.json';
    }

    const url = `https://${path}`;
    const didDocumentMetadata = {};
    let didDocument = null;

    do {
      var _didDocument;

      try {
        didDocument = await get(url);
      } catch (error) {
        err = `resolver_error: DID must resolve to a valid https URL containing a JSON document: ${error}`;
        break;
      } // TODO: this excludes the use of query params


      const docIdMatchesDid = ((_didDocument = didDocument) == null ? void 0 : _didDocument.id) === did;

      if (!docIdMatchesDid) {
        err = 'resolver_error: DID document id does not match requested did'; // break // uncomment this when adding more checks
      } // eslint-disable-next-line no-constant-condition

    } while (false);

    const contentType = typeof ((_didDocument2 = didDocument) == null ? void 0 : _didDocument2['@context']) !== 'undefined' ? 'application/did+ld+json' : 'application/did+json';

    if (err) {
      return {
        didDocument,
        didDocumentMetadata,
        didResolutionMetadata: {
          error: 'notFound',
          message: err
        }
      };
    } else {
      return {
        didDocument,
        didDocumentMetadata,
        didResolutionMetadata: {
          contentType
        }
      };
    }
  }

  return {
    web: resolve
  };
}

export { getResolver };
//# sourceMappingURL=resolver.modern.js.map
