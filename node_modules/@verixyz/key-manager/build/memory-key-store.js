"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryPrivateKeyStore = exports.MemoryKeyStore = void 0;
const abstract_key_store_1 = require("./abstract-key-store");
const abstract_private_key_store_1 = require("./abstract-private-key-store");
const uuid_1 = require("uuid");
class MemoryKeyStore extends abstract_key_store_1.AbstractKeyStore {
    constructor() {
        super(...arguments);
        this.keys = {};
    }
    get({ kid }) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.keys[kid];
            if (!key)
                throw Error('Key not found');
            return key;
        });
    }
    delete({ kid }) {
        return __awaiter(this, void 0, void 0, function* () {
            delete this.keys[kid];
            return true;
        });
    }
    import(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.keys[args.kid] = Object.assign({}, args);
            return true;
        });
    }
    list(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const safeKeys = Object.values(this.keys).map((key) => {
                const { privateKeyHex } = key, safeKey = __rest(key, ["privateKeyHex"]);
                return safeKey;
            });
            return safeKeys;
        });
    }
}
exports.MemoryKeyStore = MemoryKeyStore;
/**
 * An implementation of {@link AbstractPrivateKeyStore} that holds everything in memory.
 *
 * This is usable by {@link @verixyz/kms-local} to hold the private key data.
 */
class MemoryPrivateKeyStore extends abstract_private_key_store_1.AbstractPrivateKeyStore {
    constructor() {
        super(...arguments);
        this.privateKeys = {};
    }
    get({ alias }) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.privateKeys[alias];
            if (!key)
                throw Error(`not_found: PrivateKey not found for alias=${alias}`);
            return key;
        });
    }
    delete({ alias }) {
        return __awaiter(this, void 0, void 0, function* () {
            delete this.privateKeys[alias];
            return true;
        });
    }
    import(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const alias = args.alias || (0, uuid_1.v4)();
            const existingEntry = this.privateKeys[alias];
            if (existingEntry && existingEntry.privateKeyHex !== args.privateKeyHex) {
                throw new Error('key_already_exists: key exists with different data, please use a different alias');
            }
            this.privateKeys[alias] = Object.assign(Object.assign({}, args), { alias });
            return this.privateKeys[alias];
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            return [...Object.values(this.privateKeys)];
        });
    }
}
exports.MemoryPrivateKeyStore = MemoryPrivateKeyStore;
//# sourceMappingURL=memory-key-store.js.map