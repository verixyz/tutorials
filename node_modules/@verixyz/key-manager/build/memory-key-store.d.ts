import { IKey } from '@verixyz/core';
import { AbstractKeyStore } from './abstract-key-store';
import { AbstractPrivateKeyStore, ImportablePrivateKey, ManagedPrivateKey } from './abstract-private-key-store';
export declare class MemoryKeyStore extends AbstractKeyStore {
    private keys;
    get({ kid }: {
        kid: string;
    }): Promise<IKey>;
    delete({ kid }: {
        kid: string;
    }): Promise<boolean>;
    import(args: IKey): Promise<boolean>;
    list(args: {}): Promise<Exclude<IKey, 'privateKeyHex'>[]>;
}
/**
 * An implementation of {@link AbstractPrivateKeyStore} that holds everything in memory.
 *
 * This is usable by {@link @verixyz/kms-local} to hold the private key data.
 */
export declare class MemoryPrivateKeyStore extends AbstractPrivateKeyStore {
    private privateKeys;
    get({ alias }: {
        alias: string;
    }): Promise<ManagedPrivateKey>;
    delete({ alias }: {
        alias: string;
    }): Promise<boolean>;
    import(args: ImportablePrivateKey): Promise<ManagedPrivateKey>;
    list(): Promise<Array<ManagedPrivateKey>>;
}
//# sourceMappingURL=memory-key-store.d.ts.map