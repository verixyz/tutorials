import { CredentialPayload, IAgentContext, IAgentPlugin, IDataStore, IDIDManager, IKeyManager, IPluginMethodMap, IResolver, PresentationPayload, VerifiableCredential, VerifiablePresentation, W3CVerifiableCredential, W3CVerifiablePresentation } from '@verixyz/core';
/**
 * The type of encoding to be used for the Verifiable Credential or Presentation to be generated.
 *
 * Only `jwt` and `lds` is supported at the moment.
 *
 * @public
 */
export declare type ProofFormat = 'jwt' | 'lds';
/**
 * Encapsulates the parameters required to create a
 * {@link https://www.w3.org/TR/vc-data-model/#presentations | W3C Verifiable Presentation}
 *
 * @public
 */
export interface ICreateVerifiablePresentationArgs {
    /**
     * The json payload of the Presentation according to the
     * {@link https://www.w3.org/TR/vc-data-model/#presentations | canonical model}.
     *
     * The signer of the Presentation is chosen based on the `holder` property
     * of the `presentation`
     *
     * '@context', 'type' and 'issuanceDate' will be added automatically if omitted
     */
    presentation: PresentationPayload;
    /**
     * If this parameter is true, the resulting VerifiablePresentation is sent to the
     * {@link @verixyz/core#IDataStore | storage plugin} to be saved
     */
    save?: boolean;
    /**
     * Optional (only JWT) string challenge parameter to add to the verifiable presentation.
     */
    challenge?: string;
    /**
     * Optional string domain parameter to add to the verifiable presentation.
     */
    domain?: string;
    /**
     * The desired format for the VerifiablePresentation to be created.
     * Currently, only JWT is supported
     */
    proofFormat: ProofFormat;
    /**
     * Remove payload members during JWT-JSON transformation. Defaults to `true`.
     * See https://www.w3.org/TR/vc-data-model/#jwt-encoding
     */
    removeOriginalFields?: boolean;
}
/**
 * Encapsulates the parameters required to create a
 * {@link https://www.w3.org/TR/vc-data-model/#credentials | W3C Verifiable Credential}
 *
 * @public
 */
export interface ICreateVerifiableCredentialArgs {
    /**
     * The json payload of the Credential according to the
     * {@link https://www.w3.org/TR/vc-data-model/#credentials | canonical model}
     *
     * The signer of the Credential is chosen based on the `issuer.id` property
     * of the `credential`
     *
     * '@context', 'type' and 'issuanceDate' will be added automatically if omitted
     */
    credential: CredentialPayload;
    /**
     * If this parameter is true, the resulting VerifiablePresentation is sent to the
     * {@link @verixyz/core#IDataStore | storage plugin} to be saved
     */
    save?: boolean;
    /**
     * The desired format for the VerifiablePresentation to be created.
     */
    proofFormat: ProofFormat;
    /**
     * Remove payload members during JWT-JSON transformation. Defaults to `true`.
     * See https://www.w3.org/TR/vc-data-model/#jwt-encoding
     */
    removeOriginalFields?: boolean;
}
/**
 * Encapsulates the parameters required to verify a
 * {@link https://www.w3.org/TR/vc-data-model/#credentials | W3C Verifiable Credential}
 *
 * @public
 */
export interface IVerifyCredentialArgs {
    /**
     * The Verifiable Credential object according to the
     * {@link https://www.w3.org/TR/vc-data-model/#credentials | canonical model} or the JWT representation.
     *
     * The signer of the Credential is verified based on the `issuer.id` property
     * of the `credential` or the `iss` property of the JWT payload respectively
     *
     */
    credential: W3CVerifiableCredential;
    /**
     * When dealing with JSON-LD you also MUST provide the proper contexts.
     * Set this to `true` ONLY if you want the '@context' URLs to be fetched in case they are not pre-loaded.
     * The context definitions SHOULD rather be provided at startup instead of being fetched.
     *
     * @default false
     */
    fetchRemoteContexts?: boolean;
    /**
     * Other options can be specified for verification.
     * They will be forwarded to the lower level modules. that performt the checks
     */
    [x: string]: any;
}
/**
 * Encapsulates the parameters required to verify a
 * {@link https://www.w3.org/TR/vc-data-model/#presentations | W3C Verifiable Presentation}
 *
 * @public
 */
export interface IVerifyPresentationArgs {
    /**
     * The Verifiable Presentation object according to the
     * {@link https://www.w3.org/TR/vc-data-model/#presentations | canonical model} or the JWT representation.
     *
     * The signer of the Presentation is verified based on the `holder` property
     * of the `presentation` or the `iss` property of the JWT payload respectively
     *
     */
    presentation: W3CVerifiablePresentation;
    /**
     * Optional (only for JWT) string challenge parameter to verify the verifiable presentation against
     */
    challenge?: string;
    /**
     * Optional (only for JWT) string domain parameter to verify the verifiable presentation against
     */
    domain?: string;
    /**
     * When dealing with JSON-LD you also MUST provide the proper contexts.
     * Set this to `true` ONLY if you want the '@context' URLs to be fetched in case they are not pre-loaded.
     * The context definitions SHOULD rather be provided at startup instead of being fetched.
     *
     * @default false
     */
    fetchRemoteContexts?: boolean;
    /**
     * Other options can be specified for verification.
     * They will be forwarded to the lower level modules. that performt the checks
     */
    [x: string]: any;
}
/**
 * The interface definition for a plugin that can generate Verifiable Credentials and Presentations
 *
 * @remarks Please see {@link https://www.w3.org/TR/vc-data-model | W3C Verifiable Credentials data model}
 *
 * @public
 */
export interface ICredentialIssuer extends IPluginMethodMap {
    /**
     * Creates a Verifiable Presentation.
     * The payload, signer and format are chosen based on the `args` parameter.
     *
     * @param args - Arguments necessary to create the Presentation.
     * @param context - This reserved param is automatically added and handled by the framework, *do not override*
     *
     * @returns - a promise that resolves to the {@link @verixyz/core#VerifiablePresentation} that was requested or rejects with an error
     * if there was a problem with the input or while getting the key to sign
     *
     * @remarks Please see {@link https://www.w3.org/TR/vc-data-model/#presentations | Verifiable Presentation data model }
     */
    createVerifiablePresentation(args: ICreateVerifiablePresentationArgs, context: IContext): Promise<VerifiablePresentation>;
    /**
     * Creates a Verifiable Credential.
     * The payload, signer and format are chosen based on the `args` parameter.
     *
     * @param args - Arguments necessary to create the Presentation.
     * @param context - This reserved param is automatically added and handled by the framework, *do not override*
     *
     * @returns - a promise that resolves to the {@link @verixyz/core#VerifiableCredential} that was requested or rejects with an error
     * if there was a problem with the input or while getting the key to sign
     *
     * @remarks Please see {@link https://www.w3.org/TR/vc-data-model/#credentials | Verifiable Credential data model}
     */
    createVerifiableCredential(args: ICreateVerifiableCredentialArgs, context: IContext): Promise<VerifiableCredential>;
    /**
     * Verifies a Verifiable Credential JWT or LDS Format.
     *
     * @param args - Arguments necessary to verify a VerifiableCredential
     * @param context - This reserved param is automatically added and handled by the framework, *do not override*
     *
     * @returns - a promise that resolves to the boolean true on successful verification or rejects on error
     *
     * @remarks Please see {@link https://www.w3.org/TR/vc-data-model/#credentials | Verifiable Credential data model}
     */
    verifyCredential(args: IVerifyCredentialArgs, context: IContext): Promise<boolean>;
    /**
     * Verifies a Verifiable Presentation JWT or LDS Format.
     *
     * @param args - Arguments necessary to verify a VerifiableCredential
     * @param context - This reserved param is automatically added and handled by the framework, *do not override*
     *
     * @returns - a promise that resolves to the boolean true on successful verification or rejects on error
     *
     * @remarks Please see {@link https://www.w3.org/TR/vc-data-model/#presentations | Verifiable Credential data model}
     */
    verifyPresentation(args: IVerifyPresentationArgs, context: IContext): Promise<boolean>;
}
/**
 * Represents the requirements that this plugin has.
 * The agent that is using this plugin is expected to provide these methods.
 *
 * This interface can be used for static type checks, to make sure your application is properly initialized.
 */
export declare type IContext = IAgentContext<IResolver & Pick<IDIDManager, 'didManagerGet' | 'didManagerFind'> & Pick<IDataStore, 'dataStoreSaveVerifiablePresentation' | 'dataStoreSaveVerifiableCredential'> & Pick<IKeyManager, 'keyManagerGet' | 'keyManagerSign'>>;
/**
 * A verixyz plugin that implements the {@link ICredentialIssuer} methods.
 *
 * @public
 */
export declare class CredentialIssuer implements IAgentPlugin {
    readonly methods: ICredentialIssuer;
    readonly schema: any;
    constructor();
    /** {@inheritdoc ICredentialIssuer.createVerifiablePresentation} */
    createVerifiablePresentation(args: ICreateVerifiablePresentationArgs, context: IContext): Promise<VerifiablePresentation>;
    /** {@inheritdoc ICredentialIssuer.createVerifiableCredential} */
    createVerifiableCredential(args: ICreateVerifiableCredentialArgs, context: IContext): Promise<VerifiableCredential>;
    /** {@inheritdoc ICredentialIssuer.verifyCredential} */
    verifyCredential(args: IVerifyCredentialArgs, context: IContext): Promise<boolean>;
    /** {@inheritdoc ICredentialIssuer.verifyPresentation} */
    verifyPresentation(args: IVerifyPresentationArgs, context: IContext): Promise<boolean>;
}
//# sourceMappingURL=action-handler.d.ts.map