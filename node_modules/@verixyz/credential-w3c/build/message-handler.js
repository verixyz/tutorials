"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.W3cMessageHandler = exports.MessageTypes = void 0;
const message_handler_1 = require("@verixyz/message-handler");
const utils_1 = require("@verixyz/utils");
const did_jwt_vc_1 = require("did-jwt-vc");
const uuid_1 = require("uuid");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('verixyz:w3c:message-handler');
/**
 * These types are used by `@verixyz/data-store` when storing Verifiable Credentials and Presentations
 *
 * @internal
 */
exports.MessageTypes = {
    /** Represents a Verifiable Credential */
    vc: 'w3c.vc',
    /** Represents a Verifiable Presentation */
    vp: 'w3c.vp',
};
/**
 * An implementation of the {@link @verixyz/message-handler#AbstractMessageHandler}.
 *
 * This plugin can handle incoming W3C Verifiable Credentials and Presentations and prepare them
 * for internal storage as {@link @verixyz/message-handler#Message} types.
 *
 * The current version can only handle `JWT` encoded
 *
 * @remarks {@link @verixyz/core#IDataStore | IDataStore }
 *
 * @public
 */
class W3cMessageHandler extends message_handler_1.AbstractMessageHandler {
    handle(message, context) {
        const _super = Object.create(null, {
            handle: { get: () => super.handle }
        });
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const meta = message.getLastMetaData();
            // console.log(JSON.stringify(message, null,  2))
            //FIXME: messages should not be expected to be only JWT
            if ((meta === null || meta === void 0 ? void 0 : meta.type) === 'JWT' && message.raw) {
                const { data } = message;
                try {
                    (0, did_jwt_vc_1.validateJwtPresentationPayload)(data);
                    //FIXME: flagging this for potential privacy leaks
                    debug('JWT is', exports.MessageTypes.vp);
                    const presentation = (0, did_jwt_vc_1.normalizePresentation)(message.raw);
                    const credentials = presentation.verifiableCredential;
                    message.id = (0, utils_1.computeEntryHash)(message.raw);
                    message.type = exports.MessageTypes.vp;
                    message.from = presentation.holder;
                    message.to = (_a = presentation.verifier) === null || _a === void 0 ? void 0 : _a[0];
                    if (presentation.tag) {
                        message.threadId = presentation.tag;
                    }
                    message.createdAt = presentation.issuanceDate;
                    message.presentations = [presentation];
                    message.credentials = credentials;
                    return message;
                }
                catch (e) { }
                try {
                    (0, did_jwt_vc_1.validateJwtCredentialPayload)(data);
                    //FIXME: flagging this for potential privacy leaks
                    debug('JWT is', exports.MessageTypes.vc);
                    const credential = (0, did_jwt_vc_1.normalizeCredential)(message.raw);
                    message.id = (0, utils_1.computeEntryHash)(message.raw);
                    message.type = exports.MessageTypes.vc;
                    message.from = credential.issuer.id;
                    message.to = credential.credentialSubject.id;
                    if (credential.tag) {
                        message.threadId = credential.tag;
                    }
                    message.createdAt = credential.issuanceDate;
                    message.credentials = [credential];
                    return message;
                }
                catch (e) { }
            }
            // LDS Verification and Handling
            if (message.type === exports.MessageTypes.vc && message.data) {
                // verify credential
                const credential = message.data;
                // throws on error.
                yield context.agent.verifyCredential({ credential });
                message.id = (0, utils_1.computeEntryHash)(message.raw || message.id || (0, uuid_1.v4)());
                message.type = exports.MessageTypes.vc;
                message.from = (0, utils_1.extractIssuer)(credential);
                message.to = credential.credentialSubject.id;
                if (credential.tag) {
                    message.threadId = credential.tag;
                }
                message.createdAt = credential.issuanceDate;
                message.credentials = [credential];
                return message;
            }
            if (message.type === exports.MessageTypes.vp && message.data) {
                // verify presentation
                const presentation = message.data;
                // throws on error.
                yield context.agent.verifyPresentation({
                    presentation,
                    // FIXME: HARDCODED CHALLENGE VERIFICATION FOR NOW
                    challenge: 'verixyz',
                    domain: 'verixyz',
                });
                message.id = (0, utils_1.computeEntryHash)(message.raw || message.id || (0, uuid_1.v4)());
                message.type = exports.MessageTypes.vp;
                message.from = presentation.holder;
                // message.to = presentation.verifier?.[0]
                if (presentation.tag) {
                    message.threadId = presentation.tag;
                }
                // message.createdAt = presentation.issuanceDate
                message.presentations = [presentation];
                message.credentials = (0, utils_1.asArray)(presentation.verifiableCredential).map(utils_1.decodeCredentialToObject);
                return message;
            }
            return _super.handle.call(this, message, context);
        });
    }
}
exports.W3cMessageHandler = W3cMessageHandler;
//# sourceMappingURL=message-handler.js.map