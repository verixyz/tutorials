"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUniversalResolverFor = exports.getUniversalResolver = exports.UniversalResolver = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
/**
 * @deprecated please use `getUniresolver(url)` or `getUniresolverFor(methods, url)` instead
 */
class UniversalResolver {
    constructor(options) {
        return getUniversalResolver(options.url);
    }
}
exports.UniversalResolver = UniversalResolver;
/**
 * Creates a DIDResolver instance that can be used with `did-resolver`
 *
 * @example
 * ```typescript
 * const uniResolver = getUniversalResolver()
 * const resolver = new Resolver({
 *   web: uniResolver,
 *   key: uniResolver,
 *   elem: uniResolver
 * })
 * ```
 *
 * @param url the URL for the universal resolver instance (See https://uniresolver.io )
 * @returns `DIDResolver`
 */
function getUniversalResolver(url = 'https://dev.uniresolver.io/1.0/identifiers/') {
    if (!url) {
        throw Error('[did-resolver] Universal: url required');
    }
    const resolve = (didUrl) => __awaiter(this, void 0, void 0, function* () {
        try {
            const result = yield (0, cross_fetch_1.default)(url + didUrl);
            const ddo = yield result.json();
            return ddo;
        }
        catch (e) {
            return Promise.reject(e);
        }
    });
    return resolve;
}
exports.getUniversalResolver = getUniversalResolver;
/**
 * Creates a mapping of DID methods to a DIDResolver instance that can be used with `did-resolver`
 *
 * @example
 * ```typescript
 * const uniResolver = getUniversalResolverFor(['web', 'key', 'elem'])
 * const resolver = new Resolver({
 *   ...uniResolver,
 *   // other resolvers
 * })
 * ```
 *
 * @param methods an array of DID methods that should be resolved by this universal resolver
 * @param url the URL for the universal resolver instance (See https://uniresolver.io )
 * @returns `Record<string, DIDResolver>` a mapping of the given methods to an instance of `DIDResolver`
 */
function getUniversalResolverFor(methods, url = 'https://dev.uniresolver.io/1.0/identifiers/') {
    const uniResolver = getUniversalResolver(url);
    const mapping = {};
    for (const method of methods) {
        mapping[method] = uniResolver;
    }
    return mapping;
}
exports.getUniversalResolverFor = getUniversalResolverFor;
//# sourceMappingURL=universal-resolver.js.map