"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataStore = void 0;
const core_1 = require("@verixyz/core");
const message_1 = require("./entities/message");
const credential_1 = require("./entities/credential");
const claim_1 = require("./entities/claim");
const presentation_1 = require("./entities/presentation");
class DataStore {
    constructor(dbConnection) {
        this.schema = core_1.schema.IDataStore;
        this.dbConnection = dbConnection;
        this.methods = {
            dataStoreSaveMessage: this.dataStoreSaveMessage.bind(this),
            dataStoreGetMessage: this.dataStoreGetMessage.bind(this),
            dataStoreDeleteVerifiableCredential: this.dataStoreDeleteVerifiableCredential.bind(this),
            dataStoreSaveVerifiableCredential: this.dataStoreSaveVerifiableCredential.bind(this),
            dataStoreGetVerifiableCredential: this.dataStoreGetVerifiableCredential.bind(this),
            dataStoreSaveVerifiablePresentation: this.dataStoreSaveVerifiablePresentation.bind(this),
            dataStoreGetVerifiablePresentation: this.dataStoreGetVerifiablePresentation.bind(this),
        };
    }
    dataStoreSaveMessage(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = yield (yield this.dbConnection)
                .getRepository(message_1.Message)
                .save((0, message_1.createMessageEntity)(args.message));
            return message.id;
        });
    }
    dataStoreGetMessage(args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const messageEntity = yield (yield this.dbConnection).getRepository(message_1.Message).findOneOrFail(args.id, {
                    relations: ['credentials', 'presentations'],
                });
                return (0, message_1.createMessage)(messageEntity);
            }
            catch (e) {
                throw Error('Message not found');
            }
        });
    }
    dataStoreDeleteVerifiableCredential(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const credentialEntity = yield (yield this.dbConnection)
                .getRepository(credential_1.Credential)
                .findOneOrFail(args.hash);
            const claims = yield (yield this.dbConnection)
                .getRepository(claim_1.Claim)
                .find({ where: [{ credential: credentialEntity }] });
            yield (yield this.dbConnection).getRepository(claim_1.Claim).remove(claims);
            yield (yield this.dbConnection).getRepository(credential_1.Credential).remove(credentialEntity);
            return true;
        });
    }
    dataStoreSaveVerifiableCredential(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const verifiableCredential = yield (yield this.dbConnection)
                .getRepository(credential_1.Credential)
                .save((0, credential_1.createCredentialEntity)(args.verifiableCredential));
            return verifiableCredential.hash;
        });
    }
    dataStoreGetVerifiableCredential(args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const credentialEntity = yield (yield this.dbConnection)
                    .getRepository(credential_1.Credential)
                    .findOneOrFail(args.hash);
                return credentialEntity.raw;
            }
            catch (e) {
                throw Error('Verifiable credential not found');
            }
        });
    }
    dataStoreSaveVerifiablePresentation(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const verifiablePresentation = yield (yield this.dbConnection)
                .getRepository(presentation_1.Presentation)
                .save((0, presentation_1.createPresentationEntity)(args.verifiablePresentation));
            return verifiablePresentation.hash;
        });
    }
    dataStoreGetVerifiablePresentation(args) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const presentationEntity = yield (yield this.dbConnection)
                    .getRepository(presentation_1.Presentation)
                    .findOneOrFail(args.hash);
                return presentationEntity.raw;
            }
            catch (e) {
                throw Error('Verifiable presentation not found');
            }
        });
    }
}
exports.DataStore = DataStore;
//# sourceMappingURL=data-store.js.map