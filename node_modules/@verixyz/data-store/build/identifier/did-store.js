"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIDStore = void 0;
const did_manager_1 = require("@verixyz/did-manager");
const identifier_1 = require("../entities/identifier");
const credential_1 = require("../entities/credential");
const key_1 = require("../entities/key");
const service_1 = require("../entities/service");
const typeorm_1 = require("typeorm");
const debug_1 = __importDefault(require("debug"));
const presentation_1 = require("../entities/presentation");
const debug = (0, debug_1.default)('verixyz:typeorm:identifier-store');
class DIDStore extends did_manager_1.AbstractDIDStore {
    constructor(dbConnection) {
        super();
        this.dbConnection = dbConnection;
    }
    get({ did, alias, provider, }) {
        return __awaiter(this, void 0, void 0, function* () {
            let where = {};
            if (did !== undefined && alias === undefined) {
                where = { did };
            }
            else if (did === undefined && alias !== undefined && provider !== undefined) {
                where = { alias, provider };
            }
            else {
                throw Error('[verixyz:data-store:identifier-store] Get requires did or (alias and provider)');
            }
            const identifier = yield (yield this.dbConnection).getRepository(identifier_1.Identifier).findOne({
                where,
                relations: ['keys', 'services'],
            });
            if (!identifier)
                throw Error('Identifier not found');
            const result = {
                did: identifier.did,
                controllerKeyId: identifier.controllerKeyId,
                provider: identifier.provider,
                services: identifier.services,
                keys: identifier.keys.map((k) => ({
                    kid: k.kid,
                    type: k.type,
                    kms: k.kms,
                    publicKeyHex: k.publicKeyHex,
                    meta: k.meta,
                })),
            };
            if (identifier.alias) {
                result.alias = identifier.alias;
            }
            return result;
        });
    }
    delete({ did }) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = yield (yield this.dbConnection).getRepository(identifier_1.Identifier).findOne({
                where: { did },
                relations: ['keys', 'services', 'issuedCredentials', 'issuedPresentations'],
            });
            if (!identifier || typeof identifier === 'undefined') {
                return true;
            }
            // some drivers don't support cascading so we delete these manually
            //unlink existing keys that are no longer tied to this identifier
            let existingKeys = identifier.keys.map((key) => {
                delete key.identifier;
                return key;
            });
            yield (yield this.dbConnection).getRepository(key_1.Key).save(existingKeys);
            if (identifier.issuedCredentials || typeof identifier.issuedCredentials !== 'undefined') {
                yield (yield this.dbConnection).getRepository(credential_1.Credential).remove(identifier.issuedCredentials);
            }
            if (identifier.issuedPresentations || typeof identifier.issuedPresentations !== 'undefined') {
                yield (yield this.dbConnection).getRepository(presentation_1.Presentation).remove(identifier.issuedPresentations);
            }
            //delete existing services that are no longer tied to this identifier
            let oldServices = identifier.services;
            const srvRepo = yield (yield this.dbConnection).getRepository(service_1.Service).remove(oldServices);
            if (!identifier)
                throw Error('Identifier not found');
            debug('Deleting', did);
            yield (yield this.dbConnection).getRepository(identifier_1.Identifier).remove(identifier);
            return true;
        });
    }
    import(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = new identifier_1.Identifier();
            identifier.did = args.did;
            if (args.controllerKeyId) {
                identifier.controllerKeyId = args.controllerKeyId;
            }
            identifier.provider = args.provider;
            if (args.alias) {
                identifier.alias = args.alias;
            }
            identifier.keys = [];
            for (const argsKey of args.keys) {
                const key = new key_1.Key();
                key.kid = argsKey.kid;
                key.publicKeyHex = argsKey.publicKeyHex;
                key.kms = argsKey.kms;
                key.meta = argsKey.meta;
                identifier.keys.push(key);
            }
            identifier.services = [];
            for (const argsService of args.services) {
                const service = new service_1.Service();
                service.id = argsService.id;
                service.type = argsService.type;
                service.serviceEndpoint = argsService.serviceEndpoint;
                service.description = argsService.description;
                identifier.services.push(service);
            }
            yield (yield this.dbConnection).getRepository(identifier_1.Identifier).save(identifier);
            debug('Saving', args.did);
            return true;
        });
    }
    list(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const where = { provider: (args === null || args === void 0 ? void 0 : args.provider) || (0, typeorm_1.Not)((0, typeorm_1.IsNull)()) };
            if (args === null || args === void 0 ? void 0 : args.alias) {
                where['alias'] = args.alias;
            }
            const identifiers = yield (yield this.dbConnection).getRepository(identifier_1.Identifier).find({
                where,
                relations: ['keys', 'services'],
            });
            return identifiers.map((identifier) => {
                const i = identifier;
                if (i.alias === null) {
                    delete i.alias;
                }
                return i;
            });
        });
    }
}
exports.DIDStore = DIDStore;
//# sourceMappingURL=did-store.js.map