"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivateKeyStore = void 0;
const key_manager_1 = require("@verixyz/key-manager");
const private_key_1 = require("../entities/private-key");
const uuid_1 = require("uuid");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('verixyz:typeorm:key-store');
class PrivateKeyStore extends key_manager_1.AbstractPrivateKeyStore {
    constructor(dbConnection, secretBox) {
        super();
        this.dbConnection = dbConnection;
        this.secretBox = secretBox;
        if (!secretBox) {
            console.warn('Please provide SecretBox to the KeyStore');
        }
    }
    get({ alias }) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield (yield this.dbConnection).getRepository(private_key_1.PrivateKey).findOne(alias);
            if (!key)
                throw Error('Key not found');
            if (this.secretBox && key.privateKeyHex) {
                key.privateKeyHex = yield this.secretBox.decrypt(key.privateKeyHex);
            }
            return key;
        });
    }
    delete({ alias }) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield (yield this.dbConnection).getRepository(private_key_1.PrivateKey).findOne(alias);
            if (!key)
                throw Error(`not_found: Private Key data not found for alias=${alias}`);
            debug('Deleting private key data', alias);
            yield (yield this.dbConnection).getRepository(private_key_1.PrivateKey).remove(key);
            return true;
        });
    }
    import(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = new private_key_1.PrivateKey();
            key.alias = args.alias || (0, uuid_1.v4)();
            key.privateKeyHex = args.privateKeyHex;
            if (this.secretBox && key.privateKeyHex) {
                key.privateKeyHex = yield this.secretBox.encrypt(key.privateKeyHex);
            }
            key.type = args.type;
            debug('Saving private key data', args.alias);
            const keyRepo = yield (yield this.dbConnection).getRepository(private_key_1.PrivateKey);
            const existingKey = yield keyRepo.findOne(key.alias);
            if (existingKey && existingKey.privateKeyHex !== key.privateKeyHex) {
                throw new Error(`key_already_exists: A key with this alias exists but with different data. Please use a different alias.`);
            }
            yield keyRepo.save(key);
            return key;
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = yield (yield this.dbConnection).getRepository(private_key_1.PrivateKey).find();
            return keys;
        });
    }
}
exports.PrivateKeyStore = PrivateKeyStore;
//# sourceMappingURL=private-key-store.js.map