import { Connection, BaseEntity } from 'typeorm';
import { Key } from './key';
import { Service } from './service';
import { Message } from './message';
import { Presentation } from './presentation';
import { Credential } from './credential';
import { Claim } from './claim';
export declare class Identifier extends BaseEntity {
    did: string;
    provider?: string;
    alias?: string;
    setSaveDate(): void;
    setUpdateDate(): void;
    saveDate: Date;
    updateDate: Date;
    controllerKeyId?: string;
    keys: Key[];
    services: Service[];
    sentMessages: Message[];
    receivedMessages: Message[];
    issuedPresentations: Presentation[];
    receivedPresentations: Presentation[];
    issuedCredentials: Credential[];
    receivedCredentials: Credential[];
    issuedClaims: Claim[];
    receivedClaims: Claim[];
    /**
     * Convenience method
     *
     * const name = await identifier.getLatestClaimValue({type: 'name'})
     *
     * @param where
     */
    getLatestClaimValue(dbConnection: Promise<Connection>, where: {
        type: string;
    }): Promise<string | null | undefined>;
    shortDid(): string;
}
//# sourceMappingURL=identifier.d.ts.map