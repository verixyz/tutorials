"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPresentationEntity = exports.Presentation = void 0;
const typeorm_1 = require("typeorm");
const identifier_1 = require("./identifier");
const message_1 = require("./message");
const credential_1 = require("./credential");
const utils_1 = require("@verixyz/utils");
const did_jwt_vc_1 = require("did-jwt-vc");
let Presentation = class Presentation extends typeorm_1.BaseEntity {
    set raw(raw) {
        this._raw = raw;
        this.hash = (0, utils_1.computeEntryHash)(raw);
    }
    get raw() {
        return this._raw;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)(),
    __metadata("design:type", String)
], Presentation.prototype, "hash", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'simple-json' }),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], Presentation.prototype, "raw", null);
__decorate([
    (0, typeorm_1.ManyToOne)((type) => identifier_1.Identifier, (identifier) => identifier.issuedPresentations, {
        cascade: ['insert'],
        eager: true,
        onDelete: 'CASCADE',
    }),
    __metadata("design:type", identifier_1.Identifier)
], Presentation.prototype, "holder", void 0);
__decorate([
    (0, typeorm_1.ManyToMany)((type) => identifier_1.Identifier, (identifier) => identifier === null || identifier === void 0 ? void 0 : identifier.receivedPresentations, {
        cascade: ['insert'],
        eager: true,
        nullable: true,
    }),
    (0, typeorm_1.JoinTable)(),
    __metadata("design:type", Array)
], Presentation.prototype, "verifier", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    __metadata("design:type", String)
], Presentation.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    __metadata("design:type", Date)
], Presentation.prototype, "issuanceDate", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    __metadata("design:type", Date)
], Presentation.prototype, "expirationDate", void 0);
__decorate([
    (0, typeorm_1.Column)('simple-array'),
    __metadata("design:type", Array)
], Presentation.prototype, "context", void 0);
__decorate([
    (0, typeorm_1.Column)('simple-array'),
    __metadata("design:type", Array)
], Presentation.prototype, "type", void 0);
__decorate([
    (0, typeorm_1.ManyToMany)((type) => credential_1.Credential, (credential) => credential.presentations, {
        cascade: true,
    }),
    (0, typeorm_1.JoinTable)(),
    __metadata("design:type", Array)
], Presentation.prototype, "credentials", void 0);
__decorate([
    (0, typeorm_1.ManyToMany)((type) => message_1.Message, (message) => message.presentations),
    __metadata("design:type", Array)
], Presentation.prototype, "messages", void 0);
Presentation = __decorate([
    (0, typeorm_1.Entity)('presentation')
], Presentation);
exports.Presentation = Presentation;
const createPresentationEntity = (vpi) => {
    const vp = vpi;
    const presentation = new Presentation();
    presentation.context = (0, utils_1.asArray)(vp['@context']);
    presentation.type = (0, utils_1.asArray)(vp.type || []);
    presentation.id = vp.id;
    if (vp.issuanceDate) {
        presentation.issuanceDate = new Date(vp.issuanceDate);
    }
    if (vp.expirationDate) {
        presentation.expirationDate = new Date(vp.expirationDate);
    }
    const holder = new identifier_1.Identifier();
    holder.did = vp.holder;
    presentation.holder = holder;
    presentation.verifier = (0, utils_1.asArray)(vp.verifier || []).map((verifierDid) => {
        const id = new identifier_1.Identifier();
        id.did = verifierDid;
        return id;
    });
    presentation.raw = vpi;
    presentation.credentials = (vp.verifiableCredential || [])
        .map((cred) => {
        if (typeof cred === 'string') {
            return (0, did_jwt_vc_1.normalizeCredential)(cred);
        }
        else {
            return cred;
        }
    })
        .map(credential_1.createCredentialEntity);
    return presentation;
};
exports.createPresentationEntity = createPresentationEntity;
//# sourceMappingURL=presentation.js.map