"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Identifier = void 0;
const typeorm_1 = require("typeorm");
const key_1 = require("./key");
const service_1 = require("./service");
const message_1 = require("./message");
const presentation_1 = require("./presentation");
const credential_1 = require("./credential");
const claim_1 = require("./claim");
let Identifier = class Identifier extends typeorm_1.BaseEntity {
    setSaveDate() {
        this.saveDate = new Date();
        this.updateDate = new Date();
    }
    setUpdateDate() {
        this.updateDate = new Date();
    }
    /**
     * Convenience method
     *
     * const name = await identifier.getLatestClaimValue({type: 'name'})
     *
     * @param where
     */
    getLatestClaimValue(dbConnection, where) {
        return __awaiter(this, void 0, void 0, function* () {
            const claim = yield (yield dbConnection).getRepository(claim_1.Claim).findOne({
                where: Object.assign(Object.assign({}, where), { subject: this.did }),
                order: {
                    issuanceDate: 'DESC',
                },
            });
            return claim === null || claim === void 0 ? void 0 : claim.value;
        });
    }
    shortDid() {
        return `${this.did.slice(0, 15)}...${this.did.slice(-4)}`;
    }
};
__decorate([
    (0, typeorm_1.PrimaryColumn)(),
    __metadata("design:type", String)
], Identifier.prototype, "did", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    __metadata("design:type", String)
], Identifier.prototype, "provider", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    __metadata("design:type", String)
], Identifier.prototype, "alias", void 0);
__decorate([
    (0, typeorm_1.BeforeInsert)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Identifier.prototype, "setSaveDate", null);
__decorate([
    (0, typeorm_1.BeforeUpdate)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Identifier.prototype, "setUpdateDate", null);
__decorate([
    (0, typeorm_1.Column)({ select: false }),
    __metadata("design:type", Date)
], Identifier.prototype, "saveDate", void 0);
__decorate([
    (0, typeorm_1.Column)({ select: false }),
    __metadata("design:type", Date)
], Identifier.prototype, "updateDate", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    __metadata("design:type", String)
], Identifier.prototype, "controllerKeyId", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => key_1.Key, (key) => key.identifier),
    __metadata("design:type", Array)
], Identifier.prototype, "keys", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => service_1.Service, (service) => service.identifier, {
        cascade: true,
    }),
    __metadata("design:type", Array)
], Identifier.prototype, "services", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => message_1.Message, (message) => message.from),
    __metadata("design:type", Array)
], Identifier.prototype, "sentMessages", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => message_1.Message, (message) => message.to),
    __metadata("design:type", Array)
], Identifier.prototype, "receivedMessages", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => presentation_1.Presentation, (presentation) => presentation.holder),
    __metadata("design:type", Array)
], Identifier.prototype, "issuedPresentations", void 0);
__decorate([
    (0, typeorm_1.ManyToMany)((type) => presentation_1.Presentation, (presentation) => presentation.verifier),
    __metadata("design:type", Array)
], Identifier.prototype, "receivedPresentations", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => credential_1.Credential, (credential) => credential.issuer),
    __metadata("design:type", Array)
], Identifier.prototype, "issuedCredentials", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => credential_1.Credential, (credential) => credential.subject),
    __metadata("design:type", Array)
], Identifier.prototype, "receivedCredentials", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => claim_1.Claim, (claim) => claim.issuer),
    __metadata("design:type", Array)
], Identifier.prototype, "issuedClaims", void 0);
__decorate([
    (0, typeorm_1.OneToMany)((type) => claim_1.Claim, (claim) => claim.subject),
    __metadata("design:type", Array)
], Identifier.prototype, "receivedClaims", void 0);
Identifier = __decorate([
    (0, typeorm_1.Entity)('identifier'),
    (0, typeorm_1.Index)(['alias', 'provider'], { unique: true })
], Identifier);
exports.Identifier = Identifier;
//# sourceMappingURL=identifier.js.map