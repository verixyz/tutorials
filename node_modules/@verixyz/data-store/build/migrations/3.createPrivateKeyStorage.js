"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreatePrivateKeyStorage1629293428674 = void 0;
const typeorm_1 = require("typeorm");
const __1 = require("..");
const PreMigrationEntities_1 = require("../entities/PreMigrationEntities");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('verixyz:data-store:migrate-private-keys');
/**
 * Migration of existing private keys from verixyz 2.x to verixyz 3.x
 */
class CreatePrivateKeyStorage1629293428674 {
    up(queryRunner) {
        return __awaiter(this, void 0, void 0, function* () {
            function getTableName(givenName) {
                var _a;
                return (((_a = queryRunner.connection.entityMetadatas.find((meta) => meta.givenTableName === givenName)) === null || _a === void 0 ? void 0 : _a.tableName) ||
                    givenName);
            }
            // 1.create new table
            debug(`creating new private-key table`);
            yield queryRunner.createTable(new typeorm_1.Table({
                name: getTableName('private-key'),
                columns: [
                    {
                        name: 'alias',
                        type: 'varchar',
                        isPrimary: true,
                    },
                    {
                        name: 'type',
                        type: 'varchar',
                    },
                    {
                        name: 'privateKeyHex',
                        type: 'varchar',
                    },
                ],
            }), true);
            // 2. copy key data
            const keys = yield queryRunner.manager.find(PreMigrationEntities_1.PreMigrationKey);
            debug(`got ${keys.length} potential keys to migrate`);
            const privKeys = keys
                .filter((key) => typeof key.privateKeyHex !== 'undefined' && key.privateKeyHex !== null)
                .map((key) => ({
                alias: key.kid,
                type: key.type,
                privateKeyHex: key.privateKeyHex,
            }));
            debug(`${privKeys.length} keys need to be migrated`);
            yield queryRunner.manager
                .createQueryBuilder()
                .insert()
                .into(getTableName('private-key'))
                .values(privKeys)
                .execute();
            // 3. drop old column
            debug(`dropping privKeyHex column from old key table`);
            yield queryRunner.dropColumn(getTableName('key'), 'privateKeyHex');
            //4. done
            debug(`migrated ${privKeys.length} keys to private key storage`);
        });
    }
    down(queryRunner) {
        return __awaiter(this, void 0, void 0, function* () {
            function getTableName(givenName) {
                var _a;
                return (((_a = queryRunner.connection.entityMetadatas.find((meta) => meta.givenTableName === givenName)) === null || _a === void 0 ? void 0 : _a.tableName) ||
                    givenName);
            }
            // 1. add old column back
            debug(`adding back privateKeyHex column to key table`);
            yield queryRunner.addColumn('key', new typeorm_1.TableColumn({
                name: 'privateKeyHex',
                type: 'varchar',
                isNullable: true,
            }));
            // 2. copy key data
            debug(`checking keys to be rolled back`);
            const keys = yield queryRunner.manager.find(__1.PrivateKey);
            debug(`copying ${keys.length} keys`);
            for (const key of keys) {
                yield queryRunner.manager
                    .createQueryBuilder()
                    .update(PreMigrationEntities_1.PreMigrationKey)
                    .set({ privateKeyHex: key.privateKeyHex })
                    .where('kid = :alias', { alias: key.alias })
                    .execute();
            }
            debug(`dropping private-key table`);
            // 3. drop the new private key table
            yield queryRunner.dropTable(getTableName('private-key'));
            // 4. done
            debug(`rolled back ${keys.length} keys`);
        });
    }
}
exports.CreatePrivateKeyStorage1629293428674 = CreatePrivateKeyStorage1629293428674;
//# sourceMappingURL=3.createPrivateKeyStorage.js.map