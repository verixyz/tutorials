"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllowNullIssuanceDateForPresentations1637237492913 = void 0;
const __1 = require("..");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('verixyz:data-store:migrate-presentation-issuance-date');
/**
 * Reduce issuanceDate constraint of Presentations
 */
class AllowNullIssuanceDateForPresentations1637237492913 {
    getTableName(givenName, queryRunner) {
        var _a;
        return (((_a = queryRunner.connection.entityMetadatas.find((meta) => meta.givenTableName === givenName)) === null || _a === void 0 ? void 0 : _a.tableName) ||
            givenName);
    }
    up(queryRunner) {
        return __awaiter(this, void 0, void 0, function* () {
            if (queryRunner.connection.driver.options.type === 'sqlite') {
                debug(`splitting migration into multiple transactions to allow sqlite table updates`);
                yield queryRunner.commitTransaction();
                debug(`turning off foreign keys`);
                yield queryRunner.query('PRAGMA foreign_keys=off');
                yield queryRunner.startTransaction();
            }
            const tableName = this.getTableName('presentation', queryRunner);
            // update issuanceDate column
            let table = yield queryRunner.getTable(tableName);
            const oldColumn = table === null || table === void 0 ? void 0 : table.findColumnByName('issuanceDate');
            const newColumn = oldColumn.clone();
            newColumn.isNullable = true;
            debug(`updating issuanceDate for presentations to allow null`);
            yield queryRunner.changeColumn(table, oldColumn, newColumn);
            debug(`updated issuanceDate for presentations to allow null`);
            if (queryRunner.connection.driver.options.type === 'sqlite') {
                debug(`splitting migration into multiple transactions to allow sqlite table updates`);
                yield queryRunner.commitTransaction();
                debug(`turning on foreign keys`);
                yield queryRunner.query('PRAGMA foreign_keys=on');
                yield queryRunner.startTransaction();
            }
        });
    }
    down(queryRunner) {
        return __awaiter(this, void 0, void 0, function* () {
            if (queryRunner.connection.driver.options.type === 'sqlite') {
                debug(`splitting migration into multiple transactions to allow sqlite table updates`);
                yield queryRunner.commitTransaction();
                debug(`turning off foreign keys`);
                yield queryRunner.query('PRAGMA foreign_keys=off');
                yield queryRunner.startTransaction();
            }
            const tableName = this.getTableName('presentation', queryRunner);
            debug(`DOWN update NULL 'issuanceDate' with FAKE data for '${tableName}' table`);
            yield queryRunner.manager
                .createQueryBuilder()
                .update(__1.Presentation)
                .set({ issuanceDate: new Date(0) })
                .where('issuanceDate is NULL')
                .execute();
            // update issuanceDate column
            let table = yield queryRunner.getTable(tableName);
            const oldColumn = table === null || table === void 0 ? void 0 : table.findColumnByName('issuanceDate');
            const newColumn = oldColumn.clone();
            newColumn.isNullable = false;
            debug(`updating issuanceDate for presentations to NOT allow null`);
            yield queryRunner.changeColumn(table, oldColumn, newColumn);
            debug(`updated issuanceDate for presentations to NOT allow null`);
            if (queryRunner.connection.driver.options.type === 'sqlite') {
                debug(`splitting migration into multiple transactions to allow sqlite table updates`);
                yield queryRunner.commitTransaction();
                debug(`turning on foreign keys`);
                yield queryRunner.query('PRAGMA foreign_keys=on');
                yield queryRunner.startTransaction();
            }
            debug(`DOWN updated issuanceDate for presentations to NOT allow null`);
        });
    }
}
exports.AllowNullIssuanceDateForPresentations1637237492913 = AllowNullIssuanceDateForPresentations1637237492913;
//# sourceMappingURL=4.allowNullVPIssuanceDate.js.map