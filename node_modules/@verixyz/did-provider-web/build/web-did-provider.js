"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebDIDProvider = void 0;
const did_manager_1 = require("@verixyz/did-manager");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('verixyz:web-did:identifier-provider');
/**
 * {@link @verixyz/did-manager#DIDManager} identifier provider for `did:web` identifiers
 * @public
 */
class WebDIDProvider extends did_manager_1.AbstractIdentifierProvider {
    constructor(options) {
        super();
        this.defaultKms = options.defaultKms;
    }
    createIdentifier({ kms, alias, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyType = (options === null || options === void 0 ? void 0 : options.keyType) || 'Secp256k1';
            const key = yield context.agent.keyManagerCreate({ kms: kms || this.defaultKms, type: keyType });
            const identifier = {
                did: 'did:web:' + alias,
                controllerKeyId: key.kid,
                keys: [key],
                services: [],
            };
            debug('Created', identifier.did);
            return identifier;
        });
    }
    deleteIdentifier(identifier, context) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const { kid } of identifier.keys) {
                yield context.agent.keyManagerDelete({ kid });
            }
            return true;
        });
    }
    addKey({ identifier, key, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return { success: true };
        });
    }
    addService({ identifier, service, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return { success: true };
        });
    }
    removeKey(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return { success: true };
        });
    }
    removeService(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return { success: true };
        });
    }
}
exports.WebDIDProvider = WebDIDProvider;
//# sourceMappingURL=web-did-provider.js.map