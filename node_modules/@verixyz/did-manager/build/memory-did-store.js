"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryDIDStore = void 0;
const abstract_identifier_store_1 = require("./abstract-identifier-store");
class MemoryDIDStore extends abstract_identifier_store_1.AbstractDIDStore {
    constructor() {
        super(...arguments);
        this.identifiers = {};
    }
    get({ did, alias, provider, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (did && !alias) {
                if (!this.identifiers[did])
                    throw Error(`not_found: IIdentifier not found with did=${did}`);
                return this.identifiers[did];
            }
            else if (!did && alias && provider) {
                for (const key of Object.keys(this.identifiers)) {
                    if (this.identifiers[key].alias === alias && this.identifiers[key].provider === provider) {
                        return this.identifiers[key];
                    }
                }
            }
            else {
                throw Error('invalid_argument: Get requires did or (alias and provider)');
            }
            throw Error(`not_found: IIdentifier not found with alias=${alias} provider=${provider}`);
        });
    }
    delete({ did }) {
        return __awaiter(this, void 0, void 0, function* () {
            delete this.identifiers[did];
            return true;
        });
    }
    import(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const identifier = Object.assign({}, args);
            for (const key of identifier.keys) {
                if (key.privateKeyHex) {
                    delete key.privateKeyHex;
                }
            }
            this.identifiers[args.did] = identifier;
            return true;
        });
    }
    list(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            for (const key of Object.keys(this.identifiers)) {
                result.push(this.identifiers[key]);
            }
            if (args.alias && !args.provider) {
                result = result.filter((i) => i.alias === args.alias);
            }
            else if (args.provider && !args.alias) {
                result = result.filter((i) => i.provider === args.provider);
            }
            else if (args.provider && args.alias) {
                result = result.filter((i) => i.provider === args.provider && i.alias === args.alias);
            }
            return result;
        });
    }
}
exports.MemoryDIDStore = MemoryDIDStore;
//# sourceMappingURL=memory-did-store.js.map