import { DIDDocumentSection, IAgentContext, IIdentifier, IKey, IResolver } from '@verixyz/core';
import { DIDDocument } from 'did-resolver';
import { _ExtendedIKey, _ExtendedVerificationMethod, _NormalizedVerificationMethod } from './types/utility-types';
export declare function convertIdentifierEncryptionKeys(identifier: IIdentifier): IKey[];
export declare function compressIdentifierSecp256k1Keys(identifier: IIdentifier): IKey[];
export declare function getEthereumAddress(verificationMethod: _NormalizedVerificationMethod): string | undefined;
export declare function getChainIdForDidEthr(verificationMethod: _NormalizedVerificationMethod): number;
export declare function mapIdentifierKeysToDoc(identifier: IIdentifier, section: DIDDocumentSection | undefined, context: IAgentContext<IResolver>): Promise<_ExtendedIKey[]>;
export declare function resolveDidOrThrow(didUrl: string, context: IAgentContext<IResolver>): Promise<DIDDocument>;
/**
 * Dereferences keys from DID document and normalizes them for easy comparison.
 *
 * When dereferencing keyAgreement keys, only Ed25519 and X25519 curves are supported.
 * Other key types are omitted from the result and Ed25519 keys are converted to X25519
 *
 * @returns Promise<NormalizedVerificationMethod[]>
 */
export declare function dereferenceDidKeys(didDocument: DIDDocument, section: DIDDocumentSection | undefined, context: IAgentContext<IResolver>): Promise<_NormalizedVerificationMethod[]>;
/**
 * Converts the publicKey of a VerificationMethod to hex encoding (publicKeyHex)
 *
 * @param pk the VerificationMethod to be converted
 * @param convert when this flag is set to true, Ed25519 keys are converted to their X25519 pairs
 * @returns
 */
export declare function extractPublicKeyHex(pk: _ExtendedVerificationMethod, convert?: boolean): string;
//# sourceMappingURL=did-utils.d.ts.map