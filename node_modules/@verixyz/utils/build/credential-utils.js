"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractIssuer = exports.computeEntryHash = exports.decodePresentationToObject = exports.decodeCredentialToObject = exports.processEntryToArray = exports.MANDATORY_CREDENTIAL_CONTEXT = void 0;
const type_utils_1 = require("./type-utils");
const blakejs_1 = require("blakejs");
const did_jwt_1 = require("did-jwt");
const did_jwt_vc_1 = require("did-jwt-vc");
exports.MANDATORY_CREDENTIAL_CONTEXT = 'https://www.w3.org/2018/credentials/v1';
/**
 * Processes an entry or an array of entries into an array of entries. If a `startWithEntry` param is provided, it is
 * set as the first item in the result array.
 * @param inputEntryOrArray
 * @param startWithEntry
 *
 * @beta This API may change without prior notice.
 */
function processEntryToArray(inputEntryOrArray, startWithEntry) {
    const result = (0, type_utils_1.asArray)(inputEntryOrArray) || [startWithEntry];
    if (startWithEntry && result[0] !== startWithEntry) {
        result.unshift(startWithEntry);
    }
    return result.filter(type_utils_1.isDefined).filter((item, index, arr) => arr.indexOf(item) === index);
}
exports.processEntryToArray = processEntryToArray;
/**
 * Parses a {@link W3CVerifiableCredential} and converts it to a {@link VerifiableCredential} so it is easier to use
 * programmatically.
 *
 * @param input

 * @beta This API may change without prior notice.
 */
function decodeCredentialToObject(input) {
    return typeof input === 'string' ? (0, did_jwt_vc_1.normalizeCredential)(input) : input;
}
exports.decodeCredentialToObject = decodeCredentialToObject;
/**
 * Parses a {@link W3CVerifiableCredential} and converts it to a {@link VerifiablePresentation} so it is easier to use
 * programmatically.
 *
 * @param input

 * @beta This API may change without prior notice.
 */
function decodePresentationToObject(input) {
    let result;
    if (typeof input === 'string') {
        result = (0, did_jwt_vc_1.normalizePresentation)(input);
    }
    else {
        result = input;
        result.verifiableCredential = (0, type_utils_1.asArray)(result.verifiableCredential).map(decodeCredentialToObject);
    }
    return result;
}
exports.decodePresentationToObject = decodePresentationToObject;
/**
 * Computes a hash for a given credential or presentation.
 * This hash is usable as an internal ID for database indexing
 *
 * @param input
 *
 * @beta This API may change without prior notice.
 */
function computeEntryHash(input) {
    var _a, _b;
    let hashable;
    if (typeof input === 'string') {
        try {
            const cred = JSON.parse(input);
            hashable = ((_a = cred === null || cred === void 0 ? void 0 : cred.proof) === null || _a === void 0 ? void 0 : _a.jwt) || input;
        }
        catch (e) {
            hashable = input;
        }
    }
    else if ((_b = input === null || input === void 0 ? void 0 : input.proof) === null || _b === void 0 ? void 0 : _b.jwt) {
        hashable = input.proof.jwt;
    }
    else {
        hashable = JSON.stringify(input);
    }
    return (0, blakejs_1.blake2bHex)(hashable);
}
exports.computeEntryHash = computeEntryHash;
/**
 * Decodes a credential or presentation and returns the issuer ID
 * `iss` from a JWT or `issuer`/`issuer.id` from a VC or `holder` from a VP
 *
 * @param input
 *
 * @beta This API may change without prior notice.
 */
function extractIssuer(input) {
    if (!(0, type_utils_1.isDefined)(input)) {
        return '';
    }
    else if (typeof input === 'string') {
        // JWT
        try {
            const { payload } = (0, did_jwt_1.decodeJWT)(input);
            return payload.iss || '';
        }
        catch (e) {
            return '';
        }
    }
    else {
        // JSON
        let iss;
        if (input.issuer) {
            iss = input.issuer;
        }
        else if (input.holder) {
            iss = input.holder;
        }
        else {
            iss = '';
        }
        return typeof iss === 'string' ? iss : (iss === null || iss === void 0 ? void 0 : iss.id) || '';
    }
}
exports.extractIssuer = extractIssuer;
//# sourceMappingURL=credential-utils.js.map