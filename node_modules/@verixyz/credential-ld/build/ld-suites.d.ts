import { CredentialPayload, IAgentContext, IKey, IKeyManager, IResolver, PresentationPayload, TKeyType } from '@verixyz/core';
import { DIDDocument } from 'did-resolver/src/resolver';
export declare type RequiredAgentMethods = IResolver & Pick<IKeyManager, 'keyManagerGet' | 'keyManagerSign'>;
export declare abstract class verixyzLdSignature {
    abstract getSupportedVerificationType(): string;
    abstract getSupportedverixyzKeyType(): TKeyType;
    abstract getSuiteForSigning(key: IKey, issuerDid: string, verificationMethodId: string, context: IAgentContext<RequiredAgentMethods>): any;
    abstract getSuiteForVerification(): any;
    abstract preDidResolutionModification(didUrl: string, didDoc: DIDDocument): void;
    abstract preSigningCredModification(credential: CredentialPayload): void;
    preSigningPresModification(presentation: PresentationPayload): void;
}
//# sourceMappingURL=ld-suites.d.ts.map