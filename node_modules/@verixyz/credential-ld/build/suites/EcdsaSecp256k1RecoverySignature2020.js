"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verixyzEcdsaSecp256k1RecoverySignature2020 = void 0;
const ld_suites_1 = require("../ld-suites");
const lds_ecdsa_secp256k1_recovery2020_1 = require("@transmute/lds-ecdsa-secp256k1-recovery2020");
const u8a = __importStar(require("uint8arrays"));
const utils_1 = require("@verixyz/utils");
class verixyzEcdsaSecp256k1RecoverySignature2020 extends ld_suites_1.verixyzLdSignature {
    getSupportedVerificationType() {
        return 'EcdsaSecp256k1RecoveryMethod2020';
    }
    getSupportedverixyzKeyType() {
        return 'Secp256k1';
    }
    getSuiteForSigning(key, did, verifiableMethodId, context) {
        const controller = did;
        const signer = {
            //returns a JWS detached
            sign: (args) => __awaiter(this, void 0, void 0, function* () {
                const header = {
                    alg: 'ES256K-R',
                    b64: false,
                    crit: ['b64'],
                };
                const headerString = (0, utils_1.encodeJoseBlob)(header);
                const messageBuffer = u8a.concat([u8a.fromString(`${headerString}.`, 'utf-8'), args.data]);
                const messageString = u8a.toString(messageBuffer, 'base64');
                const signature = yield context.agent.keyManagerSign({
                    keyRef: key.kid,
                    algorithm: 'ES256K-R',
                    data: messageString,
                    encoding: 'base64',
                });
                return `${headerString}..${signature}`;
            }),
        };
        return new lds_ecdsa_secp256k1_recovery2020_1.EcdsaSecp256k1RecoverySignature2020({
            // signer,
            key: new lds_ecdsa_secp256k1_recovery2020_1.EcdsaSecp256k1RecoveryMethod2020({
                publicKeyHex: key.publicKeyHex,
                signer: () => signer,
                type: this.getSupportedVerificationType(),
                controller,
                id: verifiableMethodId,
            }),
        });
    }
    getSuiteForVerification() {
        return new lds_ecdsa_secp256k1_recovery2020_1.EcdsaSecp256k1RecoverySignature2020();
    }
    preSigningCredModification(credential) {
        credential['@context'] = [
            ...(0, utils_1.asArray)(credential['@context'] || []),
            'https://identity.foundation/EcdsaSecp256k1RecoverySignature2020/lds-ecdsa-secp256k1-recovery2020-0.0.jsonld',
        ];
    }
    preDidResolutionModification(didUrl, didDoc) {
        var _a;
        // did:ethr
        if (didUrl.toLowerCase().startsWith('did:ethr')) {
            // TODO: EcdsaSecp256k1RecoveryMethod2020 does not support blockchainAccountId
            // blockchainAccountId to ethereumAddress
            (_a = didDoc.verificationMethod) === null || _a === void 0 ? void 0 : _a.forEach((x) => {
                if (x.blockchainAccountId) {
                    x.ethereumAddress = x.blockchainAccountId.substring(0, x.blockchainAccountId.lastIndexOf('@'));
                }
            });
        }
    }
}
exports.verixyzEcdsaSecp256k1RecoverySignature2020 = verixyzEcdsaSecp256k1RecoverySignature2020;
//# sourceMappingURL=EcdsaSecp256k1RecoverySignature2020.js.map