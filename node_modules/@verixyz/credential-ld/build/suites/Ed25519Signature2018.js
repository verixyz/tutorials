"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verixyzEd25519Signature2018 = void 0;
const utils_1 = require("@verixyz/utils");
const ld_suites_1 = require("../ld-suites");
const u8a = __importStar(require("uint8arrays"));
const ed25519_signature_2018_1 = require("@transmute/ed25519-signature-2018");
class verixyzEd25519Signature2018 extends ld_suites_1.verixyzLdSignature {
    getSupportedVerificationType() {
        return 'Ed25519VerificationKey2018';
    }
    getSupportedverixyzKeyType() {
        return 'Ed25519';
    }
    getSuiteForSigning(key, issuerDid, verificationMethodId, context) {
        const controller = issuerDid;
        // DID Key ID
        let id = verificationMethodId;
        const signer = {
            // returns a JWS detached
            sign: (args) => __awaiter(this, void 0, void 0, function* () {
                const header = {
                    alg: 'EdDSA',
                    b64: false,
                    crit: ['b64'],
                };
                const headerString = (0, utils_1.encodeJoseBlob)(header);
                const messageBuffer = u8a.concat([u8a.fromString(`${headerString}.`, 'utf-8'), args.data]);
                const messageString = u8a.toString(messageBuffer, 'base64');
                const signature = yield context.agent.keyManagerSign({
                    keyRef: key.kid,
                    algorithm: 'EdDSA',
                    data: messageString,
                    encoding: 'base64',
                });
                return `${headerString}..${signature}`;
            }),
        };
        const verificationKey = new ed25519_signature_2018_1.Ed25519VerificationKey2018({
            id,
            controller,
            publicKey: u8a.fromString(key.publicKeyHex, 'base16'),
            signer: () => signer,
            type: this.getSupportedVerificationType(),
        });
        // overwrite the signer since we're not passing the private key and transmute doesn't support that behavior
        verificationKey.signer = () => signer;
        return new ed25519_signature_2018_1.Ed25519Signature2018({
            key: verificationKey,
            signer: signer,
        });
    }
    getSuiteForVerification() {
        return new ed25519_signature_2018_1.Ed25519Signature2018();
    }
    preSigningCredModification(credential) {
        // nothing to do here
    }
    preDidResolutionModification(didUrl, didDoc) {
        // nothing to do here
    }
}
exports.verixyzEd25519Signature2018 = verixyzEd25519Signature2018;
//# sourceMappingURL=Ed25519Signature2018.js.map