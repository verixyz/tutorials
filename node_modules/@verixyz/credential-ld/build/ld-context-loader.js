"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdContextLoader = void 0;
/**
 * The LdContextLoader is initialized with a List of Map<string, ContextDoc | Promise<ContextDoc>>
 * that it unifies into a single Map to provide to the documentLoader within
 * the w3c credential module.
 */
const utils_1 = require("@verixyz/utils");
class LdContextLoader {
    constructor(options) {
        this.contexts = {};
        Array.from(options.contextsPaths, (mapItem) => {
            const map = (0, utils_1.isIterable)(mapItem) ? mapItem : Object.entries(mapItem);
            // generate-plugin-schema is failing unless we use the cast to `any[]`
            for (const [key, value] of map) {
                this.contexts[key] = value;
            }
        });
    }
    has(url) {
        return this.contexts[url] !== null && typeof this.contexts[url] !== 'undefined';
    }
    get(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.contexts[url];
        });
    }
}
exports.LdContextLoader = LdContextLoader;
//# sourceMappingURL=ld-context-loader.js.map