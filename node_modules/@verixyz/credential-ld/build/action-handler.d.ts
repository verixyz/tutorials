import { IAgentPlugin, VerifiableCredential, VerifiablePresentation } from '@verixyz/core';
import { verixyzLdSignature } from './';
import { OrPromise, RecordLike } from '@verixyz/utils';
import { ContextDoc, ICreateVerifiableCredentialLDArgs, ICreateVerifiablePresentationLDArgs, ICredentialIssuerLD, IRequiredContext, IVerifyCredentialLDArgs, IVerifyPresentationLDArgs } from './types';
/**
 * A verixyz plugin that implements the {@link ICredentialIssuerLD} methods.
 *
 * @public
 */
export declare class CredentialIssuerLD implements IAgentPlugin {
    readonly methods: ICredentialIssuerLD;
    readonly schema: any;
    private ldCredentialModule;
    constructor(options: {
        contextMaps: RecordLike<OrPromise<ContextDoc>>[];
        suites: verixyzLdSignature[];
    });
    /** {@inheritdoc ICredentialIssuerLD.createVerifiablePresentationLD} */
    createVerifiablePresentationLD(args: ICreateVerifiablePresentationLDArgs, context: IRequiredContext): Promise<VerifiablePresentation>;
    /** {@inheritdoc ICredentialIssuerLD.createVerifiableCredentialLD} */
    createVerifiableCredentialLD(args: ICreateVerifiableCredentialLDArgs, context: IRequiredContext): Promise<VerifiableCredential>;
    /** {@inheritdoc ICredentialIssuerLD.verifyCredentialLD} */
    verifyCredentialLD(args: IVerifyCredentialLDArgs, context: IRequiredContext): Promise<boolean>;
    /** {@inheritdoc ICredentialIssuerLD.verifyPresentationLD} */
    verifyPresentationLD(args: IVerifyPresentationLDArgs, context: IRequiredContext): Promise<boolean>;
    private findSigningKeyWithId;
}
//# sourceMappingURL=action-handler.d.ts.map