"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthrDIDProvider = exports.toEthereumAddress = void 0;
const did_manager_1 = require("@verixyz/did-manager");
const providers_1 = require("@ethersproject/providers");
const signing_key_1 = require("@ethersproject/signing-key");
const transactions_1 = require("@ethersproject/transactions");
const kms_eth_signer_1 = require("./kms-eth-signer");
const debug_1 = __importDefault(require("debug"));
const ethr_did_1 = require("ethr-did");
const debug = (0, debug_1.default)('verixyz:did-provider-ethr');
/**
 * Helper method that can computes the ethereumAddress corresponding to a secp256k1 public key.
 * @param hexPublicKey A hex encoded public key, prefixed with `0x`
 */
function toEthereumAddress(hexPublicKey) {
    return (0, transactions_1.computeAddress)('0x' + hexPublicKey);
}
exports.toEthereumAddress = toEthereumAddress;
/**
 * {@link @verixyz/did-manager#DIDManager} identifier provider for `did:ethr` identifiers
 * @public
 */
class EthrDIDProvider extends did_manager_1.AbstractIdentifierProvider {
    constructor(options) {
        super();
        this.defaultKms = options.defaultKms;
        this.network = options.network;
        this.rpcUrl = options.rpcUrl;
        this.web3Provider = options.web3Provider;
        if (typeof this.web3Provider === 'undefined') {
            this.web3Provider = new providers_1.JsonRpcProvider(this.rpcUrl, this.network);
        }
        this.ttl = options.ttl;
        this.gas = options.gas;
        this.registry = options.registry;
    }
    createIdentifier({ kms, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield context.agent.keyManagerCreate({ kms: kms || this.defaultKms, type: 'Secp256k1' });
            const compressedPublicKey = (0, signing_key_1.computePublicKey)(`0x${key.publicKeyHex}`, true);
            const identifier = {
                did: 'did:ethr:' + (this.network !== 'mainnet' ? this.network + ':' : '') + compressedPublicKey,
                controllerKeyId: key.kid,
                keys: [key],
                services: [],
            };
            debug('Created', identifier.did);
            return identifier;
        });
    }
    deleteIdentifier(identifier, context) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const { kid } of identifier.keys) {
                yield context.agent.keyManagerDelete({ kid });
            }
            return true;
        });
    }
    getEthrDidController(identifier, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (identifier.controllerKeyId == null) {
                throw new Error('invalid_argument: identifier does not list a `controllerKeyId`');
            }
            const controllerKey = yield context.agent.keyManagerGet({ kid: identifier.controllerKeyId });
            if (typeof controllerKey === 'undefined') {
                throw new Error('invalid_argument: identifier.controllerKeyId is not managed by this agent');
            }
            return new ethr_did_1.EthrDID({
                identifier: identifier.did,
                provider: this.web3Provider,
                chainNameOrId: this.network,
                rpcUrl: this.rpcUrl,
                registry: this.registry,
                txSigner: new kms_eth_signer_1.KmsEthereumSigner(controllerKey, context, this.web3Provider),
            });
        });
    }
    addKey({ identifier, key, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(identifier, context);
            const usg = key.type === 'X25519' ? 'enc' : 'veriKey';
            const encoding = key.type === 'X25519' ? 'base58' : (options === null || options === void 0 ? void 0 : options.encoding) || 'hex';
            const attrName = `did/pub/${key.type}/${usg}/${encoding}`;
            const attrValue = '0x' + key.publicKeyHex;
            const ttl = (options === null || options === void 0 ? void 0 : options.ttl) || this.ttl;
            const gasLimit = (options === null || options === void 0 ? void 0 : options.gas) || this.gas;
            debug('ethrDid.setAttribute %o', { attrName, attrValue, ttl, gasLimit });
            const txHash = yield ethrDid.setAttribute(attrName, attrValue, ttl, undefined, {
                gasLimit,
                gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,
                maxFeePerGas: options === null || options === void 0 ? void 0 : options.maxFeePerGas,
                maxPriorityFeePerGas: options === null || options === void 0 ? void 0 : options.maxPriorityFeePerGas,
                // from: options?.from,
                nonce: options === null || options === void 0 ? void 0 : options.nonce,
                accessList: options === null || options === void 0 ? void 0 : options.accessList,
                type: options === null || options === void 0 ? void 0 : options.type,
            });
            debug({ txHash });
            return txHash;
        });
    }
    addService({ identifier, service, options }, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(identifier, context);
            const attrName = 'did/svc/' + service.type;
            const attrValue = service.serviceEndpoint;
            const ttl = (options === null || options === void 0 ? void 0 : options.ttl) || this.ttl;
            const gasLimit = (options === null || options === void 0 ? void 0 : options.gas) || this.gas;
            debug('ethrDid.setAttribute %o', { attrName, attrValue, ttl, gasLimit });
            const txHash = yield ethrDid.setAttribute(attrName, attrValue, ttl, undefined, {
                gasLimit,
                gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,
                maxFeePerGas: options === null || options === void 0 ? void 0 : options.maxFeePerGas,
                maxPriorityFeePerGas: options === null || options === void 0 ? void 0 : options.maxPriorityFeePerGas,
                // from: options?.from,
                nonce: options === null || options === void 0 ? void 0 : options.nonce,
                accessList: options === null || options === void 0 ? void 0 : options.accessList,
                type: options === null || options === void 0 ? void 0 : options.type,
            });
            debug({ txHash });
            return txHash;
        });
    }
    removeKey(args, context) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(args.identifier, context);
            const key = args.identifier.keys.find((k) => k.kid === args.kid);
            if (!key)
                throw Error('Key not found');
            const usg = key.type === 'X25519' ? 'enc' : 'veriKey';
            const encoding = key.type === 'X25519' ? 'base58' : ((_a = args.options) === null || _a === void 0 ? void 0 : _a.encoding) || 'hex';
            const attrName = `did/pub/${key.type}/${usg}/${encoding}`;
            const attrValue = '0x' + key.publicKeyHex;
            const gasLimit = ((_b = args.options) === null || _b === void 0 ? void 0 : _b.gas) || this.gas;
            debug('ethrDid.revokeAttribute', { attrName, attrValue, gasLimit });
            const txHash = yield ethrDid.revokeAttribute(attrName, attrValue, undefined, {
                gasLimit,
                gasPrice: (_c = args.options) === null || _c === void 0 ? void 0 : _c.gasPrice,
                maxFeePerGas: (_d = args.options) === null || _d === void 0 ? void 0 : _d.maxFeePerGas,
                maxPriorityFeePerGas: (_e = args.options) === null || _e === void 0 ? void 0 : _e.maxPriorityFeePerGas,
                // from: options?.from,
                nonce: (_f = args.options) === null || _f === void 0 ? void 0 : _f.nonce,
                accessList: (_g = args.options) === null || _g === void 0 ? void 0 : _g.accessList,
                type: (_h = args.options) === null || _h === void 0 ? void 0 : _h.type,
            });
            return txHash;
        });
    }
    removeService(args, context) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function* () {
            const ethrDid = yield this.getEthrDidController(args.identifier, context);
            const service = args.identifier.services.find((s) => s.id === args.id);
            if (!service)
                throw Error('Service not found');
            const attrName = 'did/svc/' + service.type;
            const attrValue = service.serviceEndpoint;
            const gasLimit = ((_a = args.options) === null || _a === void 0 ? void 0 : _a.gas) || this.gas;
            debug('ethrDid.revokeAttribute', { attrName, attrValue, gasLimit });
            const txHash = yield ethrDid.revokeAttribute(attrName, attrValue, undefined, {
                gasLimit,
                gasPrice: (_b = args.options) === null || _b === void 0 ? void 0 : _b.gasPrice,
                maxFeePerGas: (_c = args.options) === null || _c === void 0 ? void 0 : _c.maxFeePerGas,
                maxPriorityFeePerGas: (_d = args.options) === null || _d === void 0 ? void 0 : _d.maxPriorityFeePerGas,
                // from: options?.from,
                nonce: (_e = args.options) === null || _e === void 0 ? void 0 : _e.nonce,
                accessList: (_f = args.options) === null || _f === void 0 ? void 0 : _f.accessList,
                type: (_g = args.options) === null || _g === void 0 ? void 0 : _g.type,
            });
            return txHash;
        });
    }
}
exports.EthrDIDProvider = EthrDIDProvider;
//# sourceMappingURL=ethr-did-provider.js.map