"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretBox = void 0;
const key_manager_1 = require("@verixyz/key-manager");
const nacl_1 = require("@stablelib/nacl");
const random_1 = require("@stablelib/random");
const bytes_1 = require("@ethersproject/bytes");
const strings_1 = require("@ethersproject/strings");
const NONCE_BYTES = 24;
class SecretBox extends key_manager_1.AbstractSecretBox {
    constructor(secretKey) {
        super();
        this.secretKey = secretKey;
        if (!secretKey) {
            throw Error('Secret key is required');
        }
    }
    static createSecretKey() {
        return __awaiter(this, void 0, void 0, function* () {
            const pair = (0, nacl_1.generateKeyPair)();
            return (0, bytes_1.hexlify)(pair.secretKey).substring(2);
        });
    }
    encrypt(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const nonce = (0, random_1.randomBytes)(NONCE_BYTES);
            const key = (0, bytes_1.arrayify)('0x' + this.secretKey);
            const cipherText = (0, nacl_1.secretBox)(key, nonce, (0, strings_1.toUtf8Bytes)(message));
            return (0, bytes_1.hexConcat)([nonce, cipherText]).substring(2);
        });
    }
    decrypt(encryptedMessageHex) {
        return __awaiter(this, void 0, void 0, function* () {
            const cipherTextWithNonce = (0, bytes_1.arrayify)('0x' + encryptedMessageHex);
            const nonce = cipherTextWithNonce.slice(0, NONCE_BYTES);
            const cipherText = cipherTextWithNonce.slice(NONCE_BYTES);
            const key = (0, bytes_1.arrayify)('0x' + this.secretKey);
            const decrypted = (0, nacl_1.openSecretBox)(key, nonce, cipherText) || new Uint8Array(0);
            return (0, strings_1.toUtf8String)(decrypted);
        });
    }
}
exports.SecretBox = SecretBox;
//# sourceMappingURL=secret-box.js.map