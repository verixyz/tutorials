"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyManagementSystem = void 0;
const key_manager_1 = require("@verixyz/key-manager");
const did_jwt_1 = require("did-jwt");
const ed25519_1 = require("@stablelib/ed25519");
const x25519_1 = require("@stablelib/x25519");
const strings_1 = require("@ethersproject/strings");
const transactions_1 = require("@ethersproject/transactions");
const wallet_1 = require("@ethersproject/wallet");
const signing_key_1 = require("@ethersproject/signing-key");
const random_1 = require("@ethersproject/random");
const bytes_1 = require("@ethersproject/bytes");
const u8a = __importStar(require("uint8arrays"));
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('verixyz:kms:local');
class KeyManagementSystem extends key_manager_1.AbstractKeyManagementSystem {
    constructor(keyStore) {
        super();
        this.keyStore = keyStore;
    }
    importKey(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!args.type || !args.privateKeyHex) {
                throw new Error('invalid_argument: type and privateKeyHex are required to import a key');
            }
            const managedKey = this.asManagedKeyInfo(Object.assign({ alias: args.kid }, args));
            yield this.keyStore.import(Object.assign({ alias: managedKey.kid }, args));
            debug('imported key', managedKey.type, managedKey.publicKeyHex);
            return managedKey;
        });
    }
    listKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            const privateKeys = yield this.keyStore.list({});
            const managedKeys = privateKeys.map((key) => this.asManagedKeyInfo(key));
            return managedKeys;
        });
    }
    createKey({ type }) {
        return __awaiter(this, void 0, void 0, function* () {
            let key;
            switch (type) {
                case 'Ed25519': {
                    const keyPairEd25519 = (0, ed25519_1.generateKeyPair)();
                    key = yield this.importKey({
                        type,
                        privateKeyHex: u8a.toString(keyPairEd25519.secretKey, 'base16'),
                    });
                    break;
                }
                case 'Secp256k1': {
                    const privateBytes = (0, random_1.randomBytes)(32);
                    key = yield this.importKey({
                        type,
                        privateKeyHex: u8a.toString(privateBytes, 'base16'),
                    });
                    break;
                }
                case 'X25519': {
                    const keyPairX25519 = (0, x25519_1.generateKeyPair)();
                    key = yield this.importKey({
                        type,
                        privateKeyHex: u8a.toString(keyPairX25519.secretKey, 'base16'),
                    });
                    break;
                }
                default:
                    throw Error('not_supported: Key type not supported: ' + type);
            }
            debug('Created key', type, key.publicKeyHex);
            return key;
        });
    }
    deleteKey(args) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.keyStore.delete({ alias: args.kid });
        });
    }
    sign({ keyRef, algorithm, data, }) {
        return __awaiter(this, void 0, void 0, function* () {
            let managedKey;
            try {
                managedKey = yield this.keyStore.get({ alias: keyRef.kid });
            }
            catch (e) {
                throw new Error(`key_not_found: No key entry found for kid=${keyRef.kid}`);
            }
            if (managedKey.type === 'Ed25519' &&
                (typeof algorithm === 'undefined' || ['Ed25519', 'EdDSA'].includes(algorithm))) {
                return yield this.signEdDSA(managedKey.privateKeyHex, data);
            }
            else if (managedKey.type === 'Secp256k1') {
                if (typeof algorithm === 'undefined' || ['ES256K', 'ES256K-R'].includes(algorithm)) {
                    return yield this.signES256K(managedKey.privateKeyHex, algorithm, data);
                }
                else if (['eth_signTransaction', 'signTransaction', 'signTx'].includes(algorithm)) {
                    return yield this.eth_signTransaction(managedKey.privateKeyHex, data);
                }
                else if (algorithm === 'eth_signMessage') {
                    return yield this.eth_signMessage(managedKey.privateKeyHex, data);
                }
                else if (['eth_signTypedData', 'EthereumEip712Signature2021'].includes(algorithm)) {
                    return yield this.eth_signTypedData(managedKey.privateKeyHex, data);
                }
            }
            throw Error(`not_supported: Cannot sign ${algorithm} using key of type ${managedKey.type}`);
        });
    }
    sharedSecret(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let myKey;
            try {
                myKey = yield this.keyStore.get({ alias: args.myKeyRef.kid });
            }
            catch (e) {
                throw new Error(`key_not_found: No key entry found for kid=${args.myKeyRef.kid}`);
            }
            if (!myKey.privateKeyHex) {
                throw Error('key_not_managed: No private key is available for kid: ' + myKey.alias);
            }
            let theirKey = args.theirKey;
            if (!theirKey.type ||
                typeof theirKey.type !== 'string' ||
                !theirKey.publicKeyHex ||
                typeof theirKey.publicKeyHex !== 'string') {
                throw new Error(`invalid_argument: args.theirKey must contain 'type' and 'publicKeyHex'`);
            }
            let myKeyBytes = (0, bytes_1.arrayify)('0x' + myKey.privateKeyHex);
            if (myKey.type === 'Ed25519') {
                myKeyBytes = (0, ed25519_1.convertSecretKeyToX25519)(myKeyBytes);
            }
            else if (myKey.type !== 'X25519') {
                throw new Error(`not_supported: can't compute shared secret for type=${myKey.type}`);
            }
            let theirKeyBytes = (0, bytes_1.arrayify)('0x' + theirKey.publicKeyHex);
            if (theirKey.type === 'Ed25519') {
                theirKeyBytes = (0, ed25519_1.convertPublicKeyToX25519)(theirKeyBytes);
            }
            else if (theirKey.type !== 'X25519') {
                throw new Error(`not_supported: can't compute shared secret for type=${theirKey.type}`);
            }
            const shared = (0, x25519_1.sharedKey)(myKeyBytes, theirKeyBytes);
            return (0, bytes_1.hexlify)(shared).substring(2);
        });
    }
    /**
     * @returns a `0x` prefixed hex string representing the signed EIP712 data
     */
    eth_signTypedData(privateKeyHex, data) {
        return __awaiter(this, void 0, void 0, function* () {
            let msg, msgDomain, msgTypes;
            const serializedData = (0, strings_1.toUtf8String)(data);
            try {
                let jsonData = JSON.parse(serializedData);
                if (typeof jsonData.domain === 'object' && typeof jsonData.types === 'object') {
                    const { domain, types, message } = jsonData;
                    msg = message;
                    msgDomain = domain;
                    msgTypes = types;
                }
                else {
                    // next check will throw since the data couldn't be parsed
                }
            }
            catch (e) {
                // next check will throw since the data couldn't be parsed
            }
            if (typeof msgDomain !== 'object' || typeof msgTypes !== 'object' || typeof msg !== 'object') {
                throw Error(`invalid_arguments: Cannot sign typed data. 'domain', 'types', and 'message' must be provided`);
            }
            const wallet = new wallet_1.Wallet(privateKeyHex);
            const signature = yield wallet._signTypedData(msgDomain, msgTypes, msg);
            // HEX encoded string
            return signature;
        });
    }
    /**
     * @returns a `0x` prefixed hex string representing the signed message
     */
    eth_signMessage(privateKeyHex, rawMessageBytes) {
        return __awaiter(this, void 0, void 0, function* () {
            const wallet = new wallet_1.Wallet(privateKeyHex);
            const signature = yield wallet.signMessage(rawMessageBytes);
            // HEX encoded string, 0x prefixed
            return signature;
        });
    }
    /**
     * @returns a `0x` prefixed hex string representing the signed raw transaction
     */
    eth_signTransaction(privateKeyHex, rlpTransaction) {
        return __awaiter(this, void 0, void 0, function* () {
            const _a = (0, transactions_1.parse)(rlpTransaction), { v, r, s, from } = _a, tx = __rest(_a, ["v", "r", "s", "from"]);
            const wallet = new wallet_1.Wallet(privateKeyHex);
            if (from) {
                debug('WARNING: executing a transaction signing request with a `from` field.');
                if (wallet.address.toLowerCase() !== from.toLowerCase()) {
                    const msg = 'invalid_arguments: eth_signTransaction `from` field does not match the chosen key. `from` field should be omitted.';
                    debug(msg);
                    throw new Error(msg);
                }
            }
            const signedRawTransaction = yield wallet.signTransaction(tx);
            // HEX encoded string, 0x prefixed
            return signedRawTransaction;
        });
    }
    /**
     * @returns a base64url encoded signature for the `EdDSA` alg
     */
    signEdDSA(key, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const signer = (0, did_jwt_1.EdDSASigner)(key);
            const signature = yield signer(data);
            // base64url encoded string
            return signature;
        });
    }
    /**
     * @returns a base64url encoded signature for the `ES256K` or `ES256K-R` alg
     */
    signES256K(privateKeyHex, alg, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const signer = (0, did_jwt_1.ES256KSigner)(privateKeyHex, alg === 'ES256K-R');
            const signature = yield signer(data);
            // base64url encoded string
            return signature;
        });
    }
    /**
     * Converts a {@link ManagedPrivateKey} to {@link ManagedKeyInfo}
     */
    asManagedKeyInfo(args) {
        let key;
        switch (args.type) {
            case 'Ed25519': {
                const secretKey = u8a.fromString(args.privateKeyHex.toLowerCase(), 'base16');
                const publicKeyHex = u8a.toString((0, ed25519_1.extractPublicKeyFromSecretKey)(secretKey), 'base16');
                key = {
                    type: args.type,
                    kid: args.alias || publicKeyHex,
                    publicKeyHex,
                    meta: {
                        algorithms: ['Ed25519', 'EdDSA'],
                    },
                };
                break;
            }
            case 'Secp256k1': {
                const privateBytes = u8a.fromString(args.privateKeyHex.toLowerCase(), 'base16');
                const keyPair = new signing_key_1.SigningKey(privateBytes);
                const publicKeyHex = keyPair.publicKey.substring(2);
                key = {
                    type: args.type,
                    kid: args.alias || publicKeyHex,
                    publicKeyHex,
                    meta: {
                        algorithms: ['ES256K', 'ES256K-R', 'eth_signTransaction', 'eth_signTypedData', 'eth_signMessage'],
                    },
                };
                break;
            }
            case 'X25519': {
                const secretKeyBytes = u8a.fromString(args.privateKeyHex.toLowerCase(), 'base16');
                const keyPairX25519 = (0, x25519_1.generateKeyPairFromSeed)(secretKeyBytes);
                const publicKeyHex = u8a.toString(keyPairX25519.publicKey, 'base16');
                key = {
                    type: args.type,
                    kid: args.alias || publicKeyHex,
                    publicKeyHex: publicKeyHex,
                    meta: {
                        algorithms: ['ECDH', 'ECDH-ES', 'ECDH-1PU'],
                    },
                };
                break;
            }
            default:
                throw Error('not_supported: Key type not supported: ' + args.type);
        }
        return key;
    }
}
exports.KeyManagementSystem = KeyManagementSystem;
//# sourceMappingURL=key-management-system.js.map