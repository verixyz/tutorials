{"version":3,"file":"index.umd.js","sources":["../src/helpers.ts","../src/configuration.ts","../src/controller.ts","../src/logParser.ts","../src/resolver.ts"],"sourcesContent":["import { getAddress } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { computeAddress } from '@ethersproject/transactions'\nimport { VerificationMethod } from 'did-resolver'\n\nexport const identifierMatcher = /^(.*)?(0x[0-9a-fA-F]{40}|0x[0-9a-fA-F]{66})$/\nexport const nullAddress = '0x0000000000000000000000000000000000000000'\nexport const DEFAULT_REGISTRY_ADDRESS = '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b'\nexport const DEFAULT_JSON_RPC = 'http://127.0.0.1:8545/'\n\nexport type address = string\nexport type uint256 = BigNumber\nexport type bytes32 = string\nexport type bytes = string\n\nexport interface ERC1056Event {\n  identity: address\n  previousChange: uint256\n  validTo?: uint256\n  _eventName: string\n  blockNumber: number\n}\n\nexport interface DIDOwnerChanged extends ERC1056Event {\n  owner: address\n}\n\nexport interface DIDAttributeChanged extends ERC1056Event {\n  name: bytes32\n  value: bytes\n  validTo: uint256\n}\n\nexport interface DIDDelegateChanged extends ERC1056Event {\n  delegateType: bytes32\n  delegate: address\n  validTo: uint256\n}\n\nexport enum verificationMethodTypes {\n  EcdsaSecp256k1VerificationKey2019 = 'EcdsaSecp256k1VerificationKey2019',\n  EcdsaSecp256k1RecoveryMethod2020 = 'EcdsaSecp256k1RecoveryMethod2020',\n  Ed25519VerificationKey2018 = 'Ed25519VerificationKey2018',\n  RSAVerificationKey2018 = 'RSAVerificationKey2018',\n  X25519KeyAgreementKey2019 = 'X25519KeyAgreementKey2019',\n}\n\nexport enum eventNames {\n  DIDOwnerChanged = 'DIDOwnerChanged',\n  DIDAttributeChanged = 'DIDAttributeChanged',\n  DIDDelegateChanged = 'DIDDelegateChanged',\n}\n\nexport interface LegacyVerificationMethod extends VerificationMethod {\n  /**@deprecated */\n  publicKeyHex?: string\n  /**@deprecated */\n  publicKeyBase64?: string\n  /**@deprecated */\n  publicKeyPem?: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport const legacyAttrTypes: Record<string, string> = {\n  sigAuth: 'SignatureAuthentication2018',\n  veriKey: 'VerificationKey2018',\n  enc: 'KeyAgreementKey2019',\n}\n\nexport const legacyAlgoMap: Record<string, string> = {\n  /**@deprecated */\n  Secp256k1VerificationKey2018: verificationMethodTypes.EcdsaSecp256k1VerificationKey2019,\n  /**@deprecated */\n  Ed25519SignatureAuthentication2018: verificationMethodTypes.Ed25519VerificationKey2018,\n  /**@deprecated */\n  Secp256k1SignatureAuthentication2018: verificationMethodTypes.EcdsaSecp256k1VerificationKey2019,\n  //keep legacy mapping\n  RSAVerificationKey2018: verificationMethodTypes.RSAVerificationKey2018,\n  Ed25519VerificationKey2018: verificationMethodTypes.Ed25519VerificationKey2018,\n  X25519KeyAgreementKey2019: verificationMethodTypes.X25519KeyAgreementKey2019,\n}\n\nexport function strip0x(input: string): string {\n  return input.startsWith('0x') ? input.slice(2) : input\n}\n\nexport function bytes32toString(input: bytes32 | Uint8Array): string {\n  const buff: Buffer = typeof input === 'string' ? Buffer.from(input.slice(2), 'hex') : Buffer.from(input)\n  return buff.toString('utf8').replace(/\\0+$/, '')\n}\n\nexport function stringToBytes32(str: string): string {\n  const buffStr = '0x' + Buffer.from(str).slice(0, 32).toString('hex')\n  return buffStr + '0'.repeat(66 - buffStr.length)\n}\n\nexport function interpretIdentifier(identifier: string): { address: string; publicKey?: string; network?: string } {\n  let id = identifier\n  let network = undefined\n  if (id.startsWith('did:ethr')) {\n    id = id.split('?')[0]\n    const components = id.split(':')\n    id = components[components.length - 1]\n    if (components.length >= 4) {\n      network = components.splice(2, components.length - 3).join(':')\n    }\n  }\n  if (id.length > 42) {\n    return { address: computeAddress(id), publicKey: id, network }\n  } else {\n    return { address: getAddress(id), network } // checksum address\n  }\n}\n\nexport const knownInfuraNetworks: Record<string, string> = {\n  mainnet: '0x1',\n  ropsten: '0x3',\n  rinkeby: '0x4',\n  goerli: '0x5',\n  kovan: '0x2a',\n}\n\nexport const knownNetworks: Record<string, string> = {\n  ...knownInfuraNetworks,\n  rsk: '0x1e',\n  'rsk:testnet': '0x1f',\n  artis_t1: '0x03c401',\n  artis_s1: '0x03c301',\n  matic: '0x89',\n  maticmum: '0x13881',\n}\n\nexport enum Errors {\n  /**\n   * The resolver has failed to construct the DID document.\n   * This can be caused by a network issue, a wrong registry address or malformed logs while parsing the registry history.\n   * Please inspect the `DIDResolutionMetadata.message` to debug further.\n   */\n  notFound = 'notFound',\n\n  /**\n   * The resolver does not know how to resolve the given DID. Most likely it is not a `did:ethr`.\n   */\n  invalidDid = 'invalidDid',\n\n  /**\n   * The resolver is misconfigured or is being asked to resolve a DID anchored on an unknown network\n   */\n  unknownNetwork = 'unknownNetwork',\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract, ContractFactory } from '@ethersproject/contracts'\nimport { InfuraProvider, JsonRpcProvider, Provider } from '@ethersproject/providers'\nimport DidRegistryContract from 'ethr-did-registry'\nimport { DEFAULT_REGISTRY_ADDRESS, knownInfuraNetworks, knownNetworks } from './helpers'\n\n/**\n * A configuration entry for an ethereum network\n * It should contain at least one of `name` or `chainId` AND one of `provider`, `web3`, or `rpcUrl`\n *\n * @example ```js\n * { name: 'development', registry: '0x9af37603e98e0dc2b855be647c39abe984fc2445', rpcUrl: 'http://127.0.0.1:8545/' }\n * { name: 'goerli', chainId: 5, provider: new InfuraProvider('goerli') }\n * { name: 'rinkeby', provider: new AlchemyProvider('rinkeby') }\n * { name: 'rsk:testnet', chainId: '0x1f', rpcUrl: 'https://public-node.testnet.rsk.co' }\n * ```\n */\nexport interface ProviderConfiguration {\n  name?: string\n  provider?: Provider\n  rpcUrl?: string\n  registry?: string\n  chainId?: string | number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  web3?: any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [index: string]: any\n}\n\nexport interface MultiProviderConfiguration extends ProviderConfiguration {\n  networks?: ProviderConfiguration[]\n}\n\nexport interface InfuraConfiguration {\n  infuraProjectId: string\n}\n\nexport type ConfigurationOptions = MultiProviderConfiguration | InfuraConfiguration\n\nexport type ConfiguredNetworks = Record<string, Contract>\n\nfunction configureNetworksWithInfura(projectId?: string): ConfiguredNetworks {\n  if (!projectId) {\n    return {}\n  }\n  const networks: ProviderConfiguration[] = [\n    { name: 'mainnet', chainId: '0x1', provider: new InfuraProvider('homestead', projectId) },\n    { name: 'ropsten', chainId: '0x3', provider: new InfuraProvider('ropsten', projectId) },\n    { name: 'rinkeby', chainId: '0x4', provider: new InfuraProvider('rinkeby', projectId) },\n    { name: 'goerli', chainId: '0x5', provider: new InfuraProvider('goerli', projectId) },\n    { name: 'kovan', chainId: '0x2a', provider: new InfuraProvider('kovan', projectId) },\n  ]\n  return configureNetworks({ networks })\n}\n\nexport function getContractForNetwork(conf: ProviderConfiguration): Contract {\n  let provider: Provider = conf.provider || conf.web3?.currentProvider\n  if (!provider) {\n    if (conf.rpcUrl) {\n      const chainIdRaw = conf.chainId ? conf.chainId : knownNetworks[conf.name || '']\n      const chainId = chainIdRaw ? BigNumber.from(chainIdRaw).toNumber() : chainIdRaw\n      const networkName = knownInfuraNetworks[conf.name || ''] ? conf.name?.replace('mainnet', 'homestead') : 'any'\n      provider = new JsonRpcProvider(conf.rpcUrl, chainId || networkName)\n    } else {\n      throw new Error(`invalid_config: No web3 provider could be determined for network ${conf.name || conf.chainId}`)\n    }\n  }\n  const contract: Contract = ContractFactory.fromSolidity(DidRegistryContract)\n    .attach(conf.registry || DEFAULT_REGISTRY_ADDRESS)\n    .connect(provider)\n  return contract\n}\n\nfunction configureNetwork(net: ProviderConfiguration): ConfiguredNetworks {\n  const networks: ConfiguredNetworks = {}\n  const chainId = net.chainId || knownNetworks[net.name || '']\n  if (chainId) {\n    if (net.name) {\n      networks[net.name] = getContractForNetwork(net)\n    }\n    const id = typeof chainId === 'number' ? `0x${chainId.toString(16)}` : chainId\n    networks[id] = getContractForNetwork(net)\n  } else if (net.provider || net.web3 || net.rpcUrl) {\n    networks[net.name || ''] = getContractForNetwork(net)\n  }\n  return networks\n}\n\nfunction configureNetworks(conf: MultiProviderConfiguration): ConfiguredNetworks {\n  return {\n    ...configureNetwork(conf),\n    ...conf.networks?.reduce<ConfiguredNetworks>((networks, net) => {\n      return { ...networks, ...configureNetwork(net) }\n    }, {}),\n  }\n}\n\n/**\n * Generates a configuration that maps ethereum network names and chainIDs to the respective ERC1056 contracts deployed on them.\n * @returns a record of ERC1056 `Contract` instances\n * @param conf configuration options for the resolver. An array of network details.\n * Each network entry should contain at least one of `name` or `chainId` AND one of `provider`, `web3`, or `rpcUrl`\n * For convenience, you can also specify an `infuraProjectId` which will create a mapping for all the networks supported by https://infura.io.\n * @example ```js\n * [\n *   { name: 'development', registry: '0x9af37603e98e0dc2b855be647c39abe984fc2445', rpcUrl: 'http://127.0.0.1:8545/' },\n *   { name: 'goerli', chainId: 5, provider: new InfuraProvider('goerli') },\n *   { name: 'rinkeby', provider: new AlchemyProvider('rinkeby') },\n *   { name: 'rsk:testnet', chainId: '0x1f', rpcUrl: 'https://public-node.testnet.rsk.co' },\n * ]\n * ```\n */\nexport function configureResolverWithNetworks(conf: ConfigurationOptions = {}): ConfiguredNetworks {\n  const networks = {\n    ...configureNetworksWithInfura((<InfuraConfiguration>conf).infuraProjectId),\n    ...configureNetworks(<MultiProviderConfiguration>conf),\n  }\n  if (Object.keys(networks).length === 0) {\n    throw new Error('invalid_config: Please make sure to have at least one network')\n  }\n  return networks\n}\n","import { Signer } from '@ethersproject/abstract-signer'\nimport { CallOverrides, Contract } from '@ethersproject/contracts'\nimport { BlockTag, JsonRpcProvider, Provider, TransactionReceipt } from '@ethersproject/providers'\nimport { getContractForNetwork } from './configuration'\nimport { address, DEFAULT_REGISTRY_ADDRESS, interpretIdentifier, stringToBytes32 } from './helpers'\n\n/**\n * A class that can be used to interact with the ERC1056 contract on behalf of a local controller key-pair\n */\nexport class EthrDidController {\n  private contract: Contract\n  private signer?: Signer\n  private address: string\n  public did: string\n\n  /**\n   * Creates an EthrDidController instance.\n   *\n   * @param identifier - required - a `did:ethr` string or a publicKeyHex or an ethereum address\n   * @param signer - optional - a Signer that represents the current controller key (owner) of the identifier. If a 'signer' is not provided, then a 'contract' with an attached signer can be used.\n   * @param contract - optional - a Contract instance representing a ERC1056 contract. At least one of `contract`, `provider`, or `rpcUrl` is required\n   * @param chainNameOrId - optional - the network name or chainID, defaults to 'mainnet'\n   * @param provider - optional - a web3 Provider. At least one of `contract`, `provider`, or `rpcUrl` is required\n   * @param rpcUrl - optional - a JSON-RPC URL that can be used to connect to an ethereum network. At least one of `contract`, `provider`, or `rpcUrl` is required\n   * @param registry - optional - The ERC1056 registry address. Defaults to '0xdca7ef03e98e0dc2b855be647c39abe984fcf21b'. Only used with 'provider' or 'rpcUrl'\n   */\n  constructor(\n    identifier: string | address,\n    contract?: Contract,\n    signer?: Signer,\n    chainNameOrId = 'mainnet',\n    provider?: Provider,\n    rpcUrl?: string,\n    registry: string = DEFAULT_REGISTRY_ADDRESS\n  ) {\n    // initialize identifier\n    const { address, publicKey, network } = interpretIdentifier(identifier)\n    const net = network || chainNameOrId\n    // initialize contract connection\n    if (contract) {\n      this.contract = contract\n    } else if (provider || signer?.provider || rpcUrl) {\n      const prov = provider || signer?.provider\n      this.contract = getContractForNetwork({ name: net, provider: prov, registry, rpcUrl })\n    } else {\n      throw new Error(' either a contract instance or a provider or rpcUrl is required to initialize')\n    }\n    this.signer = signer\n    this.address = address\n    let networkString = net ? `${net}:` : ''\n    if (networkString in ['mainnet:', '0x1:']) {\n      networkString = ''\n    }\n    this.did = publicKey ? `did:ethr:${networkString}${publicKey}` : `did:ethr:${networkString}${address}`\n  }\n\n  async getOwner(address: address, blockTag?: BlockTag): Promise<string> {\n    const result = await this.contract.functions.identityOwner(address, { blockTag })\n    return result[0]\n  }\n\n  async attachContract(controller?: address | Promise<address>): Promise<Contract> {\n    const currentOwner = controller ? await controller : await this.getOwner(this.address, 'latest')\n    const signer = this.signer\n      ? this.signer\n      : (<JsonRpcProvider>this.contract.provider).getSigner(currentOwner) || this.contract.signer\n    return this.contract.connect(signer)\n  }\n\n  async changeOwner(newOwner: address, options: CallOverrides = {}): Promise<TransactionReceipt> {\n    // console.log(`changing owner for ${oldOwner} on registry at ${registryContract.address}`)\n    const overrides = {\n      gasLimit: 123456,\n      gasPrice: 1000000000,\n      ...options,\n    }\n\n    const contract = await this.attachContract(overrides.from)\n    delete overrides.from\n\n    const ownerChange = await contract.functions.changeOwner(this.address, newOwner, overrides)\n    return await ownerChange.wait()\n  }\n\n  async addDelegate(\n    delegateType: string,\n    delegateAddress: address,\n    exp: number,\n    options: CallOverrides = {}\n  ): Promise<TransactionReceipt> {\n    const overrides = {\n      gasLimit: 123456,\n      gasPrice: 1000000000,\n      ...options,\n    }\n    const contract = await this.attachContract(overrides.from)\n    delete overrides.from\n\n    const delegateTypeBytes = stringToBytes32(delegateType)\n    const addDelegateTx = await contract.functions.addDelegate(\n      this.address,\n      delegateTypeBytes,\n      delegateAddress,\n      exp,\n      overrides\n    )\n    addDelegateTx\n    return await addDelegateTx.wait()\n  }\n\n  async revokeDelegate(\n    delegateType: string,\n    delegateAddress: address,\n    options: CallOverrides = {}\n  ): Promise<TransactionReceipt> {\n    const overrides = {\n      gasLimit: 123456,\n      gasPrice: 1000000000,\n      ...options,\n    }\n    delegateType = delegateType.startsWith('0x') ? delegateType : stringToBytes32(delegateType)\n    const contract = await this.attachContract(overrides.from)\n    delete overrides.from\n    const addDelegateTx = await contract.functions.revokeDelegate(\n      this.address,\n      delegateType,\n      delegateAddress,\n      overrides\n    )\n    return await addDelegateTx.wait()\n  }\n\n  async setAttribute(\n    attrName: string,\n    attrValue: string,\n    exp: number,\n    options: CallOverrides = {}\n  ): Promise<TransactionReceipt> {\n    const overrides = {\n      gasLimit: 123456,\n      gasPrice: 1000000000,\n      controller: undefined,\n      ...options,\n    }\n    attrName = attrName.startsWith('0x') ? attrName : stringToBytes32(attrName)\n    attrValue = attrValue.startsWith('0x') ? attrValue : '0x' + Buffer.from(attrValue, 'utf-8').toString('hex')\n    const contract = await this.attachContract(overrides.from)\n    delete overrides.from\n    const setAttrTx = await contract.functions.setAttribute(this.address, attrName, attrValue, exp, overrides)\n    return await setAttrTx.wait()\n  }\n\n  async revokeAttribute(attrName: string, attrValue: string, options: CallOverrides = {}): Promise<TransactionReceipt> {\n    // console.log(`revoking attribute ${attrName}(${attrValue}) for ${identity}`)\n    const overrides = {\n      gasLimit: 123456,\n      gasPrice: 1000000000,\n      ...options,\n    }\n    attrName = attrName.startsWith('0x') ? attrName : stringToBytes32(attrName)\n    attrValue = attrValue.startsWith('0x') ? attrValue : '0x' + Buffer.from(attrValue, 'utf-8').toString('hex')\n    const contract = await this.attachContract(overrides.from)\n    delete overrides.from\n    const revokeAttributeTX = await contract.functions.revokeAttribute(this.address, attrName, attrValue, overrides)\n    return await revokeAttributeTX.wait()\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { Log } from '@ethersproject/providers'\nimport { LogDescription } from '@ethersproject/abi'\nimport { bytes32toString, ERC1056Event } from './helpers'\n\nfunction populateEventMetaClass(logResult: LogDescription, blockNumber: number): ERC1056Event {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: Record<string, any> = {}\n  if (logResult.eventFragment.inputs.length !== logResult.args.length) {\n    throw new TypeError('malformed event input. wrong number of arguments')\n  }\n  logResult.eventFragment.inputs.forEach((input, index) => {\n    let val = logResult.args[index]\n    if (typeof val === 'object') {\n      val = BigNumber.from(val)\n    }\n    if (input.type === 'bytes32') {\n      val = bytes32toString(val)\n    }\n    result[input.name] = val\n  })\n  result._eventName = logResult.name\n  result.blockNumber = blockNumber\n  return result as ERC1056Event\n}\n\nexport function logDecoder(contract: Contract, logs: Log[]): ERC1056Event[] {\n  const results: ERC1056Event[] = logs.map((log: Log) => {\n    const res = contract.interface.parseLog(log)\n    const event = populateEventMetaClass(res, log.blockNumber)\n    return event\n  })\n  return results\n}\n","import { Base58 } from '@ethersproject/basex'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Block, BlockTag } from '@ethersproject/providers'\nimport { ConfigurationOptions, ConfiguredNetworks, configureResolverWithNetworks } from './configuration'\nimport { EthrDidController } from './controller'\nimport {\n  DIDDocument,\n  DIDResolutionOptions,\n  DIDResolutionResult,\n  DIDResolver,\n  ParsedDID,\n  Resolvable,\n  ServiceEndpoint,\n  VerificationMethod,\n} from 'did-resolver'\nimport {\n  interpretIdentifier,\n  DIDAttributeChanged,\n  DIDDelegateChanged,\n  ERC1056Event,\n  eventNames,\n  legacyAlgoMap,\n  legacyAttrTypes,\n  LegacyVerificationMethod,\n  verificationMethodTypes,\n  identifierMatcher,\n  nullAddress,\n  DIDOwnerChanged,\n  knownNetworks,\n  Errors,\n  strip0x,\n} from './helpers'\nimport { logDecoder } from './logParser'\n\nexport function getResolver(options: ConfigurationOptions): Record<string, DIDResolver> {\n  return new EthrDidResolver(options).build()\n}\n\nexport class EthrDidResolver {\n  private contracts: ConfiguredNetworks\n\n  constructor(options: ConfigurationOptions) {\n    this.contracts = configureResolverWithNetworks(options)\n  }\n\n  /**\n   * returns the current owner of a DID (represented by an address or public key)\n   *\n   * @param address\n   */\n  async getOwner(address: string, networkId: string, blockTag?: BlockTag): Promise<string> {\n    //TODO: check if address or public key\n    return new EthrDidController(address, this.contracts[networkId]).getOwner(address, blockTag)\n  }\n\n  /**\n   * returns the previous change\n   *\n   * @param address\n   */\n  async previousChange(address: string, networkId: string, blockTag?: BlockTag): Promise<BigNumber> {\n    const result = await this.contracts[networkId].functions.changed(address, { blockTag })\n    // console.log(`last change result: '${BigNumber.from(result['0'])}'`)\n    return BigNumber.from(result['0'])\n  }\n\n  async getBlockMetadata(blockHeight: number, networkId: string): Promise<{ height: string; isoDate: string }> {\n    const block: Block = await this.contracts[networkId].provider.getBlock(blockHeight)\n    return {\n      height: block.number.toString(),\n      isoDate: new Date(block.timestamp * 1000).toISOString().replace('.000', ''),\n    }\n  }\n\n  async changeLog(\n    identity: string,\n    networkId: string,\n    blockTag: BlockTag = 'latest'\n  ): Promise<{ address: string; history: ERC1056Event[]; controllerKey?: string; chainId: number }> {\n    const contract = this.contracts[networkId]\n    const provider = contract.provider\n    const hexChainId = networkId.startsWith('0x') ? networkId : knownNetworks[networkId]\n    //TODO: this can be used to check if the configuration is ok\n    const chainId = hexChainId ? BigNumber.from(hexChainId).toNumber() : (await provider.getNetwork()).chainId\n    const history: ERC1056Event[] = []\n    const { address, publicKey } = interpretIdentifier(identity)\n    const controllerKey = publicKey\n    let previousChange: BigNumber | null = await this.previousChange(address, networkId, blockTag)\n    while (previousChange) {\n      const blockNumber = previousChange\n      // console.log(`gigel ${previousChange}`)\n      const fromBlock =\n        previousChange.toHexString() !== '0x00' ? previousChange.sub(1).toHexString() : previousChange.toHexString()\n      const logs = await provider.getLogs({\n        address: contract.address, // networks[networkId].registryAddress,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        topics: [null as any, `0x000000000000000000000000${address.slice(2)}`],\n        fromBlock,\n        toBlock: previousChange.toHexString(),\n      })\n      const events: ERC1056Event[] = logDecoder(contract, logs)\n      events.reverse()\n      previousChange = null\n      for (const event of events) {\n        history.unshift(event)\n        if (event.previousChange.lt(blockNumber)) {\n          previousChange = event.previousChange\n        }\n      }\n    }\n    return { address, history, controllerKey, chainId }\n  }\n\n  wrapDidDocument(\n    did: string,\n    address: string,\n    controllerKey: string | undefined,\n    history: ERC1056Event[],\n    chainId: number,\n    blockHeight: string | number,\n    now: BigNumber\n  ): { didDocument: DIDDocument; deactivated: boolean; versionId: number; nextVersionId: number } {\n    const baseDIDDocument: DIDDocument = {\n      '@context': [\n        'https://www.w3.org/ns/did/v1',\n        'https://identity.foundation/EcdsaSecp256k1RecoverySignature2020/lds-ecdsa-secp256k1-recovery2020-0.0.jsonld',\n      ],\n      id: did,\n      verificationMethod: [],\n      authentication: [],\n      assertionMethod: [],\n    }\n\n    let controller = address\n\n    const authentication = [`${did}#controller`]\n    const keyAgreement: string[] = []\n\n    let versionId = 0\n    let nextVersionId = Number.POSITIVE_INFINITY\n    let deactivated = false\n    let delegateCount = 0\n    let serviceCount = 0\n    const auth: Record<string, string> = {}\n    const keyAgreementRefs: Record<string, string> = {}\n    const pks: Record<string, VerificationMethod> = {}\n    const services: Record<string, ServiceEndpoint> = {}\n    for (const event of history) {\n      if (blockHeight !== -1 && event.blockNumber > blockHeight) {\n        if (nextVersionId > event.blockNumber) {\n          nextVersionId = event.blockNumber\n        }\n        continue\n      } else {\n        if (versionId < event.blockNumber) {\n          versionId = event.blockNumber\n        }\n      }\n      const validTo = event.validTo || BigNumber.from(0)\n      const eventIndex = `${event._eventName}-${\n        (<DIDDelegateChanged>event).delegateType || (<DIDAttributeChanged>event).name\n      }-${(<DIDDelegateChanged>event).delegate || (<DIDAttributeChanged>event).value}`\n      if (validTo && validTo.gte(now)) {\n        if (event._eventName === eventNames.DIDDelegateChanged) {\n          const currentEvent = <DIDDelegateChanged>event\n          delegateCount++\n          const delegateType = currentEvent.delegateType //conversion from bytes32 is done in logParser\n          switch (delegateType) {\n            case 'sigAuth':\n              auth[eventIndex] = `${did}#delegate-${delegateCount}`\n            // eslint-disable-line no-fallthrough\n            case 'veriKey':\n              pks[eventIndex] = {\n                id: `${did}#delegate-${delegateCount}`,\n                type: verificationMethodTypes.EcdsaSecp256k1RecoveryMethod2020,\n                controller: did,\n                blockchainAccountId: `${currentEvent.delegate}@eip155:${chainId}`,\n              }\n              break\n          }\n        } else if (event._eventName === eventNames.DIDAttributeChanged) {\n          const currentEvent = <DIDAttributeChanged>event\n          const name = currentEvent.name //conversion from bytes32 is done in logParser\n          const match = name.match(/^did\\/(pub|svc)\\/(\\w+)(\\/(\\w+))?(\\/(\\w+))?$/)\n          if (match) {\n            const section = match[1]\n            const algorithm = match[2]\n            const type = legacyAttrTypes[match[4]] || match[4]\n            const encoding = match[6]\n            switch (section) {\n              case 'pub': {\n                delegateCount++\n                const pk: LegacyVerificationMethod = {\n                  id: `${did}#delegate-${delegateCount}`,\n                  type: `${algorithm}${type}`,\n                  controller: did,\n                }\n                pk.type = legacyAlgoMap[pk.type] || algorithm\n                switch (encoding) {\n                  case null:\n                  case undefined:\n                  case 'hex':\n                    pk.publicKeyHex = strip0x(currentEvent.value)\n                    break\n                  case 'base64':\n                    pk.publicKeyBase64 = Buffer.from(currentEvent.value.slice(2), 'hex').toString('base64')\n                    break\n                  case 'base58':\n                    pk.publicKeyBase58 = Base58.encode(Buffer.from(currentEvent.value.slice(2), 'hex'))\n                    break\n                  case 'pem':\n                    pk.publicKeyPem = Buffer.from(currentEvent.value.slice(2), 'hex').toString()\n                    break\n                  default:\n                    pk.value = strip0x(currentEvent.value)\n                }\n                pks[eventIndex] = pk\n                if (match[4] === 'sigAuth') {\n                  auth[eventIndex] = pk.id\n                } else if (match[4] === 'enc') {\n                  keyAgreementRefs[eventIndex] = pk.id\n                }\n                break\n              }\n              case 'svc':\n                serviceCount++\n                services[eventIndex] = {\n                  id: `${did}#service-${serviceCount}`,\n                  type: algorithm,\n                  serviceEndpoint: Buffer.from(currentEvent.value.slice(2), 'hex').toString(),\n                }\n                break\n            }\n          }\n        }\n      } else if (event._eventName === eventNames.DIDOwnerChanged) {\n        const currentEvent = <DIDOwnerChanged>event\n        controller = currentEvent.owner\n        if (currentEvent.owner === nullAddress) {\n          deactivated = true\n          break\n        }\n      } else {\n        if (\n          event._eventName === eventNames.DIDDelegateChanged ||\n          (event._eventName === eventNames.DIDAttributeChanged &&\n            (<DIDAttributeChanged>event).name.match(/^did\\/pub\\//))\n        ) {\n          delegateCount++\n        } else if (\n          event._eventName === eventNames.DIDAttributeChanged &&\n          (<DIDAttributeChanged>event).name.match(/^did\\/svc\\//)\n        ) {\n          serviceCount++\n        }\n        delete auth[eventIndex]\n        delete pks[eventIndex]\n        delete services[eventIndex]\n      }\n    }\n\n    const publicKeys: VerificationMethod[] = [\n      {\n        id: `${did}#controller`,\n        type: verificationMethodTypes.EcdsaSecp256k1RecoveryMethod2020,\n        controller: did,\n        blockchainAccountId: `${controller}@eip155:${chainId}`,\n      },\n    ]\n\n    if (controllerKey && controller == address) {\n      publicKeys.push({\n        id: `${did}#controllerKey`,\n        type: verificationMethodTypes.EcdsaSecp256k1VerificationKey2019,\n        controller: did,\n        publicKeyHex: strip0x(controllerKey),\n      })\n      authentication.push(`${did}#controllerKey`)\n    }\n\n    const didDocument: DIDDocument = {\n      ...baseDIDDocument,\n      verificationMethod: publicKeys.concat(Object.values(pks)),\n      authentication: authentication.concat(Object.values(auth)),\n    }\n    if (Object.values(services).length > 0) {\n      didDocument.service = Object.values(services)\n    }\n    if (Object.values(keyAgreementRefs).length > 0) {\n      didDocument.keyAgreement = keyAgreement.concat(Object.values(keyAgreementRefs))\n    }\n    didDocument.assertionMethod = [...(didDocument.verificationMethod?.map((pk) => pk.id) || [])]\n\n    return deactivated\n      ? {\n          didDocument: { ...baseDIDDocument, '@context': 'https://www.w3.org/ns/did/v1' },\n          deactivated,\n          versionId,\n          nextVersionId,\n        }\n      : { didDocument, deactivated, versionId, nextVersionId }\n  }\n\n  async resolve(\n    did: string,\n    parsed: ParsedDID,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _unused: Resolvable,\n    options: DIDResolutionOptions\n  ): Promise<DIDResolutionResult> {\n    const fullId = parsed.id.match(identifierMatcher)\n    if (!fullId) {\n      return {\n        didResolutionMetadata: {\n          error: Errors.invalidDid,\n          message: `Not a valid did:ethr: ${parsed.id}`,\n        },\n        didDocumentMetadata: {},\n        didDocument: null,\n      }\n    }\n    const id = fullId[2]\n    const networkId = !fullId[1] ? 'mainnet' : fullId[1].slice(0, -1)\n    let blockTag: string | number = options.blockTag || 'latest'\n    if (typeof parsed.query === 'string') {\n      const qParams = new URLSearchParams(parsed.query)\n      blockTag = qParams.get('versionId') ?? blockTag\n      try {\n        blockTag = Number.parseInt(<string>blockTag)\n      } catch (e) {\n        blockTag = 'latest'\n        // invalid versionId parameters are ignored\n      }\n    }\n\n    if (!this.contracts[networkId]) {\n      return {\n        didResolutionMetadata: {\n          error: Errors.unknownNetwork,\n          message: `The DID resolver does not have a configuration for network: ${networkId}`,\n        },\n        didDocumentMetadata: {},\n        didDocument: null,\n      }\n    }\n\n    let now = BigNumber.from(Math.floor(new Date().getTime() / 1000))\n\n    if (typeof blockTag === 'number') {\n      const block = await this.getBlockMetadata(blockTag, networkId)\n      now = BigNumber.from(Date.parse(block.isoDate) / 1000)\n    } else {\n      // 'latest'\n    }\n\n    const { address, history, controllerKey, chainId } = await this.changeLog(id, networkId, 'latest')\n    try {\n      const { didDocument, deactivated, versionId, nextVersionId } = this.wrapDidDocument(\n        did,\n        address,\n        controllerKey,\n        history,\n        chainId,\n        blockTag,\n        now\n      )\n      const status = deactivated ? { deactivated: true } : {}\n      let versionMeta = {}\n      let versionMetaNext = {}\n      if (versionId !== 0) {\n        const block = await this.getBlockMetadata(versionId, networkId)\n        versionMeta = {\n          versionId: block.height,\n          updated: block.isoDate,\n        }\n      }\n      if (nextVersionId !== Number.POSITIVE_INFINITY) {\n        const block = await this.getBlockMetadata(nextVersionId, networkId)\n        versionMetaNext = {\n          nextVersionId: block.height,\n          nextUpdate: block.isoDate,\n        }\n      }\n      return {\n        didDocumentMetadata: { ...status, ...versionMeta, ...versionMetaNext },\n        didResolutionMetadata: { contentType: 'application/did+ld+json' },\n        didDocument,\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any) {\n      return {\n        didResolutionMetadata: {\n          error: Errors.notFound,\n          message: e.toString(), // This is not in spec, nut may be helpful\n        },\n        didDocumentMetadata: {},\n        didDocument: null,\n      }\n    }\n  }\n\n  build(): Record<string, DIDResolver> {\n    return { ethr: this.resolve.bind(this) }\n  }\n}\n"],"names":["identifierMatcher","nullAddress","DEFAULT_REGISTRY_ADDRESS","verificationMethodTypes","eventNames","legacyAttrTypes","sigAuth","veriKey","enc","legacyAlgoMap","Secp256k1VerificationKey2018","EcdsaSecp256k1VerificationKey2019","Ed25519SignatureAuthentication2018","Ed25519VerificationKey2018","Secp256k1SignatureAuthentication2018","RSAVerificationKey2018","X25519KeyAgreementKey2019","strip0x","input","startsWith","slice","bytes32toString","buff","Buffer","from","toString","replace","stringToBytes32","str","buffStr","repeat","length","interpretIdentifier","identifier","id","network","undefined","split","components","splice","join","address","computeAddress","publicKey","getAddress","knownInfuraNetworks","mainnet","ropsten","rinkeby","goerli","kovan","knownNetworks","rsk","artis_t1","artis_s1","matic","maticmum","Errors","configureNetworksWithInfura","projectId","networks","name","chainId","provider","InfuraProvider","configureNetworks","getContractForNetwork","conf","web3","currentProvider","rpcUrl","chainIdRaw","BigNumber","toNumber","networkName","JsonRpcProvider","Error","contract","ContractFactory","fromSolidity","DidRegistryContract","attach","registry","connect","configureNetwork","net","reduce","configureResolverWithNetworks","infuraProjectId","Object","keys","EthrDidController","constructor","signer","chainNameOrId","did","prov","networkString","getOwner","blockTag","functions","identityOwner","result","attachContract","controller","currentOwner","getSigner","changeOwner","newOwner","options","overrides","gasLimit","gasPrice","ownerChange","wait","addDelegate","delegateType","delegateAddress","exp","delegateTypeBytes","addDelegateTx","revokeDelegate","setAttribute","attrName","attrValue","setAttrTx","revokeAttribute","revokeAttributeTX","populateEventMetaClass","logResult","blockNumber","eventFragment","inputs","args","TypeError","forEach","index","val","type","_eventName","logDecoder","logs","results","map","log","res","interface","parseLog","event","state","prototype","s","thenable","update","shouldContinue","body","_resumeAfterBody","_resumeAfterTest","getResolver","EthrDidResolver","build","contracts","networkId","previousChange","changed","getBlockMetadata","blockHeight","getBlock","block","height","number","isoDate","Date","timestamp","toISOString","changeLog","identity","hexChainId","history","controllerKey","fromBlock","toHexString","sub","getLogs","topics","toBlock","events","reverse","unshift","lt","getNetwork","wrapDidDocument","now","baseDIDDocument","verificationMethod","authentication","assertionMethod","keyAgreement","versionId","nextVersionId","Number","POSITIVE_INFINITY","deactivated","delegateCount","serviceCount","auth","keyAgreementRefs","pks","services","validTo","eventIndex","delegate","value","gte","DIDDelegateChanged","currentEvent","EcdsaSecp256k1RecoveryMethod2020","blockchainAccountId","DIDAttributeChanged","match","section","algorithm","encoding","pk","publicKeyHex","publicKeyBase64","publicKeyBase58","Base58","encode","publicKeyPem","serviceEndpoint","DIDOwnerChanged","owner","publicKeys","push","didDocument","concat","values","service","resolve","parsed","_unused","didDocumentMetadata","status","versionMeta","versionMetaNext","didResolutionMetadata","contentType","nextUpdate","updated","e","error","notFound","message","fullId","invalidDid","query","qParams","URLSearchParams","get","parseInt","unknownNetwork","Math","floor","getTime","parse","ethr","bind"],"mappings":"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"}