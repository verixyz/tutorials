{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { createJWT, ES256KSigner, hexToBytes, JWTVerified, Signer as JWTSigner, verifyJWT } from 'did-jwt'\nimport { Signer as TxSigner } from '@ethersproject/abstract-signer'\nimport { CallOverrides } from '@ethersproject/contracts'\nimport { computeAddress } from '@ethersproject/transactions'\nimport { computePublicKey } from '@ethersproject/signing-key'\nimport { Provider } from '@ethersproject/providers'\nimport { Wallet } from '@ethersproject/wallet'\nimport * as base64 from '@ethersproject/base64'\nimport { hexlify, hexValue, isBytes } from '@ethersproject/bytes'\nimport { Base58 } from '@ethersproject/basex'\nimport { toUtf8Bytes } from '@ethersproject/strings'\nimport { EthrDidController, interpretIdentifier, REGISTRY } from 'ethr-did-resolver'\nimport { Resolvable } from 'did-resolver'\n\nexport enum DelegateTypes {\n  veriKey = 'veriKey',\n  sigAuth = 'sigAuth',\n  enc = 'enc',\n}\n\ninterface IConfig {\n  identifier: string\n  chainNameOrId?: string | number\n\n  registry?: string\n\n  signer?: JWTSigner\n  alg?: 'ES256K' | 'ES256K-R'\n  txSigner?: TxSigner\n  privateKey?: string\n\n  rpcUrl?: string\n  provider?: Provider\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  web3?: any\n}\n\nexport type KeyPair = {\n  address: string\n  privateKey: string\n  publicKey: string\n  identifier: string\n}\n\ntype DelegateOptions = {\n  delegateType?: DelegateTypes\n  expiresIn?: number\n}\n\nexport class EthrDID {\n  public did: string\n  public address: string\n  public signer?: JWTSigner\n  public alg?: 'ES256K' | 'ES256K-R'\n  private owner?: string\n  private controller?: EthrDidController\n\n  constructor(conf: IConfig) {\n    const { address, publicKey, network } = interpretIdentifier(conf.identifier)\n    const chainNameOrId = typeof conf.chainNameOrId === 'number' ? hexValue(conf.chainNameOrId) : conf.chainNameOrId\n    if (conf.provider || conf.rpcUrl || conf.web3) {\n      let txSigner = conf.txSigner\n      if (conf.privateKey && typeof txSigner === 'undefined') {\n        txSigner = new Wallet(conf.privateKey)\n      }\n      this.controller = new EthrDidController(\n        conf.identifier,\n        undefined,\n        txSigner,\n        chainNameOrId,\n        conf.provider || conf.web3?.currentProvider,\n        conf.rpcUrl,\n        conf.registry || REGISTRY\n      )\n      this.did = this.controller.did\n    } else {\n      const net = network || chainNameOrId\n      let networkString = net ? `${net}:` : ''\n      if (networkString in ['mainnet:', '0x1:']) {\n        networkString = ''\n      }\n      this.did =\n        typeof publicKey === 'string' ? `did:ethr:${networkString}${publicKey}` : `did:ethr:${networkString}${address}`\n    }\n    this.address = address\n    if (conf.signer) {\n      this.signer = conf.signer\n      this.alg = conf.alg\n      if (!this.alg) {\n        console.warn(\n          'A JWT signer was specified but no algorithm was set. Please set the `alg` parameter when calling `new EthrDID()`'\n        )\n      }\n    } else if (conf.privateKey) {\n      this.signer = ES256KSigner(hexToBytes(conf.privateKey), true)\n      this.alg = 'ES256K-R'\n    }\n  }\n\n  static createKeyPair(chainNameOrId?: string | number): KeyPair {\n    const wallet = Wallet.createRandom()\n    const privateKey = wallet.privateKey\n    const address = computeAddress(privateKey)\n    const publicKey = computePublicKey(privateKey, true)\n    const net = typeof chainNameOrId === 'number' ? hexValue(chainNameOrId) : chainNameOrId\n    const identifier = net ? `did:ethr:${net}:${publicKey}` : publicKey\n    return { address, privateKey, publicKey, identifier }\n  }\n\n  async lookupOwner(cache = true): Promise<string> {\n    if (typeof this.controller === 'undefined') {\n      throw new Error('a web3 provider configuration is needed for network operations')\n    }\n    if (cache && this.owner) return this.owner\n    return this.controller?.getOwner(this.address)\n  }\n\n  async changeOwner(newOwner: string, txOptions?: CallOverrides): Promise<string> {\n    if (typeof this.controller === 'undefined') {\n      throw new Error('a web3 provider configuration is needed for network operations')\n    }\n    const owner = await this.lookupOwner()\n    const receipt = await this.controller.changeOwner(newOwner, {\n      ...txOptions,\n      from: owner,\n    })\n    this.owner = newOwner\n    return receipt.transactionHash\n  }\n\n  async addDelegate(\n    delegate: string,\n    delegateOptions?: DelegateOptions,\n    txOptions: CallOverrides = {}\n  ): Promise<string> {\n    if (typeof this.controller === 'undefined') {\n      throw new Error('a web3 provider configuration is needed for network operations')\n    }\n    const owner = await this.lookupOwner()\n    const receipt = await this.controller.addDelegate(\n      delegateOptions?.delegateType || DelegateTypes.veriKey,\n      delegate,\n      delegateOptions?.expiresIn || 86400,\n      { ...txOptions, from: owner }\n    )\n    return receipt.transactionHash\n  }\n\n  async revokeDelegate(\n    delegate: string,\n    delegateType = DelegateTypes.veriKey,\n    txOptions: CallOverrides = {}\n  ): Promise<string> {\n    if (typeof this.controller === 'undefined') {\n      throw new Error('a web3 provider configuration is needed for network operations')\n    }\n    const owner = await this.lookupOwner()\n    const receipt = await this.controller.revokeDelegate(delegateType, delegate, { ...txOptions, from: owner })\n    return receipt.transactionHash\n  }\n\n  async setAttribute(\n    key: string,\n    value: string | Uint8Array,\n    expiresIn = 86400,\n    /** @deprecated, please use txOptions.gasLimit */\n    gasLimit?: number,\n    txOptions: CallOverrides = {}\n  ): Promise<string> {\n    if (typeof this.controller === 'undefined') {\n      throw new Error('a web3 provider configuration is needed for network operations')\n    }\n    const owner = await this.lookupOwner()\n    const receipt = await this.controller.setAttribute(key, attributeToHex(key, value), expiresIn, {\n      gasLimit,\n      ...txOptions,\n      from: owner,\n    })\n    return receipt.transactionHash\n  }\n\n  async revokeAttribute(\n    key: string,\n    value: string | Uint8Array,\n    /** @deprecated please use `txOptions.gasLimit` */\n    gasLimit?: number,\n    txOptions: CallOverrides = {}\n  ): Promise<string> {\n    if (typeof this.controller === 'undefined') {\n      throw new Error('a web3 provider configuration is needed for network operations')\n    }\n    const owner = await this.lookupOwner()\n    const receipt = await this.controller.revokeAttribute(key, attributeToHex(key, value), {\n      gasLimit,\n      ...txOptions,\n      from: owner,\n    })\n    return receipt.transactionHash\n  }\n\n  // Create a temporary signing delegate able to sign JWT on behalf of identity\n  async createSigningDelegate(\n    delegateType = DelegateTypes.veriKey,\n    expiresIn = 86400\n  ): Promise<{ kp: KeyPair; txHash: string }> {\n    const kp = EthrDID.createKeyPair()\n    this.signer = ES256KSigner(hexToBytes(kp.privateKey), true)\n    const txHash = await this.addDelegate(kp.address, {\n      delegateType,\n      expiresIn,\n    })\n    return { kp, txHash }\n  }\n\n  // eslint-disable-next-line\n  async signJWT(payload: any, expiresIn?: number): Promise<string> {\n    if (typeof this.signer !== 'function') {\n      throw new Error('No signer configured')\n    }\n    const options = {\n      signer: this.signer,\n      alg: 'ES256K-R',\n      issuer: this.did,\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (expiresIn) (<any>options)['expiresIn'] = expiresIn\n    return createJWT(payload, options)\n  }\n\n  async verifyJWT(jwt: string, resolver: Resolvable, audience = this.did): Promise<JWTVerified> {\n    return verifyJWT(jwt, { resolver, audience })\n  }\n}\n\nfunction attributeToHex(key: string, value: string | Uint8Array): string {\n  if (value instanceof Uint8Array || isBytes(value)) {\n    return hexlify(value)\n  }\n  const matchKeyWithEncoding = key.match(/^did\\/(pub|auth|svc)\\/(\\w+)(\\/(\\w+))?(\\/(\\w+))?$/)\n  const encoding = matchKeyWithEncoding?.[6]\n  const matchHexString = (<string>value).match(/^0x[0-9a-fA-F]*$/)\n  if (encoding && !matchHexString) {\n    if (encoding === 'base64') {\n      return hexlify(base64.decode(value))\n    }\n    if (encoding === 'base58') {\n      return hexlify(Base58.decode(value))\n    }\n  } else if (matchHexString) {\n    return <string>value\n  }\n\n  return hexlify(toUtf8Bytes(value))\n}\n"],"names":["DelegateTypes","EthrDID","constructor","conf","did","address","signer","alg","owner","controller","publicKey","network","interpretIdentifier","identifier","chainNameOrId","hexValue","provider","rpcUrl","web3","txSigner","privateKey","Wallet","EthrDidController","undefined","currentProvider","registry","REGISTRY","net","networkString","console","warn","ES256KSigner","hexToBytes","createKeyPair","wallet","createRandom","computeAddress","computePublicKey","lookupOwner","cache","Error","getOwner","changeOwner","newOwner","txOptions","from","receipt","transactionHash","addDelegate","delegate","delegateOptions","delegateType","veriKey","expiresIn","revokeDelegate","setAttribute","key","value","gasLimit","attributeToHex","revokeAttribute","createSigningDelegate","kp","txHash","signJWT","payload","options","issuer","createJWT","verifyJWT","jwt","resolver","audience","Uint8Array","isBytes","hexlify","matchKeyWithEncoding","match","encoding","matchHexString","base64","decode","Base58","toUtf8Bytes"],"mappings":"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"}