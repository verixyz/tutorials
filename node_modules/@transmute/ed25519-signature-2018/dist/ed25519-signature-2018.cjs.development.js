'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var ed25519KeyPair = require('@transmute/ed25519-key-pair');
var joseLd = require('@transmute/jose-ld');
var jsonld = _interopDefault(require('jsonld'));
var crypto = _interopDefault(require('crypto'));
var sec = require('@transmute/security-context');
var cred = require('@transmute/credentials-context');

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var Ed25519VerificationKey2018 = /*#__PURE__*/function (_Ed25519KeyPair) {
  _inheritsLoose(Ed25519VerificationKey2018, _Ed25519KeyPair);

  function Ed25519VerificationKey2018(args) {
    var _this;

    _this = _Ed25519KeyPair.call(this, args) || this;
    var JWA_ALG = "EdDSA";
    var verifier = joseLd.JWS.createVerifier(_this.verifier("EdDsa"), JWA_ALG, {
      detached: true
    });

    _this.verifier = function () {
      return verifier;
    };

    if (_this.privateKey) {
      var signer = joseLd.JWS.createSigner(_this.signer("EdDsa"), JWA_ALG, {
        detached: true
      });

      _this.signer = function () {
        return {
          sign: function () {
            var _sign = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_ref) {
              var data;
              return runtime_1.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      data = _ref.data;
                      return _context.abrupt("return", signer.sign({
                        data: data
                      }));

                    case 2:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            function sign(_x) {
              return _sign.apply(this, arguments);
            }

            return sign;
          }()
        };
      };
    }

    return _this;
  }

  return Ed25519VerificationKey2018;
}(ed25519KeyPair.Ed25519KeyPair);

Ed25519VerificationKey2018.generate = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_ref2) {
    var secureRandom, k;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            secureRandom = _ref2.secureRandom;
            _context2.next = 3;
            return ed25519KeyPair.Ed25519KeyPair.generate({
              secureRandom: secureRandom
            });

          case 3:
            k = _context2.sent;
            return _context2.abrupt("return", new Ed25519VerificationKey2018(k));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}();

Ed25519VerificationKey2018.from = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(args) {
    var k;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return ed25519KeyPair.Ed25519KeyPair.from(args);

          case 2:
            k = _context3.sent;
            return _context3.abrupt("return", new Ed25519VerificationKey2018(k));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3) {
    return _ref4.apply(this, arguments);
  };
}();

var sha256 = function sha256(data) {
  var h = crypto.createHash("sha256");
  h.update(data);
  return h.digest();
};

var Ed25519Signature2018 = /*#__PURE__*/function () {
  function Ed25519Signature2018(options) {
    if (options === void 0) {
      options = {};
    }

    this.useNativeCanonize = false;
    this.type = "Ed25519Signature2018";
    this.signer = options.signer;
    this.originalDate = options.date;

    if (options.date) {
      this.date = new Date(options.date);

      if (isNaN(this.date)) {
        throw TypeError("\"date\" \"" + options.date + "\" is not a valid date.");
      }
    }

    if (options.key) {
      this.key = options.key;
      this.verificationMethod = this.key.id;
      this.signer = this.key.signer();
      this.verifier = this.key.verifier();
    }
  }

  var _proto = Ed25519Signature2018.prototype;

  _proto.ensureSuiteContext = function ensureSuiteContext(_ref) {
    var document = _ref.document;

    // Ed25519Signature2018 shipped in credential v1
    if (document["@context"] === cred.constants.CREDENTIALS_CONTEXT_V1_URL || Array.isArray(document["@context"]) && document["@context"].includes(cred.constants.CREDENTIALS_CONTEXT_V1_URL)) {
      // document already includes the required context
      return;
    } // otherwise ensure the suite context


    if (document["@context"] === sec.constants.ED25519_2018_v1_URL || Array.isArray(document["@context"]) && document["@context"].includes(sec.constants.ED25519_2018_v1_URL)) {
      // document already includes the required context
      return;
    }

    throw new TypeError("The document to be signed must contain this suite's @context, " + ("\"" + JSON.stringify(document["@context"], null, 2) + "\"."));
  };

  _proto.canonize = /*#__PURE__*/function () {
    var _canonize = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(input, _ref2) {
      var documentLoader, expansionMap, skipExpansion;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              documentLoader = _ref2.documentLoader, expansionMap = _ref2.expansionMap, skipExpansion = _ref2.skipExpansion;
              return _context.abrupt("return", jsonld.canonize(input, {
                algorithm: "URDNA2015",
                format: "application/n-quads",
                documentLoader: documentLoader,
                expansionMap: expansionMap,
                skipExpansion: skipExpansion,
                useNative: this.useNativeCanonize
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function canonize(_x, _x2) {
      return _canonize.apply(this, arguments);
    }

    return canonize;
  }();

  _proto.canonizeProof = /*#__PURE__*/function () {
    var _canonizeProof = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(proof, _ref3) {
      var documentLoader, expansionMap;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              documentLoader = _ref3.documentLoader, expansionMap = _ref3.expansionMap;
              // `jws`,`signatureValue`,`proofValue` must not be included in the proof
              // options
              proof = _extends({}, proof);
              delete proof.jws;
              return _context2.abrupt("return", this.canonize(proof, {
                documentLoader: documentLoader,
                expansionMap: expansionMap,
                skipExpansion: false
              }));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function canonizeProof(_x3, _x4) {
      return _canonizeProof.apply(this, arguments);
    }

    return canonizeProof;
  }();

  _proto.createVerifyData = /*#__PURE__*/function () {
    var _createVerifyData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_ref4) {
      var document, proof, documentLoader, expansionMap, c14nProofOptions, c14nDocument;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              document = _ref4.document, proof = _ref4.proof, documentLoader = _ref4.documentLoader, expansionMap = _ref4.expansionMap;
              _context3.next = 3;
              return this.canonizeProof(proof, {
                documentLoader: documentLoader,
                expansionMap: expansionMap
              });

            case 3:
              c14nProofOptions = _context3.sent;
              _context3.next = 6;
              return this.canonize(document, {
                documentLoader: documentLoader,
                expansionMap: expansionMap
              });

            case 6:
              c14nDocument = _context3.sent;
              return _context3.abrupt("return", Buffer.concat([sha256(c14nProofOptions), sha256(c14nDocument)]));

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function createVerifyData(_x5) {
      return _createVerifyData.apply(this, arguments);
    }

    return createVerifyData;
  }();

  _proto.matchProof = /*#__PURE__*/function () {
    var _matchProof = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(_ref5) {
      var proof;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              proof = _ref5.proof;
              return _context4.abrupt("return", proof.type === this.type);

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function matchProof(_x6) {
      return _matchProof.apply(this, arguments);
    }

    return matchProof;
  }();

  _proto.sign = /*#__PURE__*/function () {
    var _sign = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(_ref6) {
      var verifyData, proof, detachedJws;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              verifyData = _ref6.verifyData, proof = _ref6.proof;

              if (this.signer && typeof this.signer.sign === "function") {
                _context5.next = 3;
                break;
              }

              throw new Error("A signer API has not been specified.");

            case 3:
              _context5.next = 5;
              return this.signer.sign({
                data: verifyData
              });

            case 5:
              detachedJws = _context5.sent;
              proof.jws = detachedJws;
              return _context5.abrupt("return", proof);

            case 8:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function sign(_x7) {
      return _sign.apply(this, arguments);
    }

    return sign;
  }();

  _proto.createProof = /*#__PURE__*/function () {
    var _createProof = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_ref7) {
      var document, purpose, documentLoader, expansionMap, compactProof, proof, context, date, str, source, credentials, verifyData;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              document = _ref7.document, purpose = _ref7.purpose, documentLoader = _ref7.documentLoader, expansionMap = _ref7.expansionMap, compactProof = _ref7.compactProof;
              context = document["@context"] || sec.constants.ED25519_2018_v1_URL;

              if (!this.proof) {
                _context6.next = 8;
                break;
              }

              _context6.next = 5;
              return jsonld.compact(this.proof, context, {
                documentLoader: documentLoader,
                expansionMap: expansionMap,
                compactToRelative: false
              });

            case 5:
              proof = _context6.sent;
              _context6.next = 9;
              break;

            case 8:
              // create proof JSON-LD document
              proof = {
                "@context": context
              };

            case 9:
              // ensure proof type is set
              proof.type = this.type; // set default `now` date if not given in `proof` or `options`

              date = this.date;

              if (proof.created === undefined && date === undefined) {
                date = new Date();
              } // ensure date is in string format


              if (date && typeof date !== "string") {
                if (date === undefined || date === null) {
                  date = new Date();
                } else if (typeof date === "number" || typeof date === "string") {
                  date = new Date(date);
                }

                str = date.toISOString();
                date = str.substr(0, str.length - 5) + "Z";
              }

              source = document.verifiableCredential || document;
              credentials = Array.isArray(source) ? source : [source]; // Add check to see if date matches standard

              credentials.forEach(function (credential) {
                if (typeof credential.issuanceDate !== "string") {
                  throw new Error(["The vc-data-model specification expects the issuanceDate property to be a xsd:dateTime(https://www.w3.org/TR/xmlschema-2/#dateTime)", "Original input: " + JSON.stringify(document.issuanceDate), "https://www.w3.org/TR/vc-data-model/#issuance-date"].join("\n"));
                }
              }); // add API overrides

              if (date) {
                proof.created = date;

                if (this.originalDate && this.originalDate !== date) {
                  console.warn(["The proof.created is of type xsd:dateTime(https://www.w3.org/TR/xmlschema-2/#dateTime), this is different from the input provided", "Original Input: " + JSON.stringify(this.originalDate), "Current Proof.created value: " + date, "Please provide a conforming XML date string with format YYYY-MM-DDTHH:mm:ssZ to avoid seeing this message"].join("\n"));
                }
              } // `verificationMethod` is for newer suites, `creator` for legacy


              if (this.verificationMethod !== undefined) {
                proof.verificationMethod = this.verificationMethod;
              } // allow purpose to update the proof; the `proof` is in the
              // SECURITY_CONTEXT_URL `@context` -- therefore the `purpose` must
              // ensure any added fields are also represented in that same `@context`


              _context6.next = 20;
              return purpose.update(proof, {
                document: document,
                suite: this,
                documentLoader: documentLoader,
                expansionMap: expansionMap
              });

            case 20:
              proof = _context6.sent;
              _context6.next = 23;
              return this.createVerifyData({
                document: document,
                proof: proof,
                documentLoader: documentLoader,
                expansionMap: expansionMap,
                compactProof: compactProof
              });

            case 23:
              verifyData = _context6.sent;
              _context6.next = 26;
              return this.sign({
                verifyData: verifyData,
                document: document,
                proof: proof,
                documentLoader: documentLoader,
                expansionMap: expansionMap
              });

            case 26:
              proof = _context6.sent;
              delete proof["@context"];
              return _context6.abrupt("return", proof);

            case 29:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function createProof(_x8) {
      return _createProof.apply(this, arguments);
    }

    return createProof;
  }();

  _proto.getVerificationMethod = /*#__PURE__*/function () {
    var _getVerificationMethod = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_ref8) {
      var proof, documentLoader, verificationMethod, _yield$documentLoader, document, method, methodResponse, response;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              proof = _ref8.proof, documentLoader = _ref8.documentLoader;
              verificationMethod = proof.verificationMethod;

              if (typeof verificationMethod === "object") {
                verificationMethod = verificationMethod.id;
              }

              if (verificationMethod) {
                _context7.next = 5;
                break;
              }

              throw new Error('No "verificationMethod" or "creator" found in proof.');

            case 5:
              _context7.next = 7;
              return documentLoader(verificationMethod);

            case 7:
              _yield$documentLoader = _context7.sent;
              document = _yield$documentLoader.document;
              method = document.verificationMethod.find(function (m) {
                return m.id === verificationMethod;
              });
              methodResponse = _extends({
                "@context": document["@context"]
              }, method, {
                controller: {
                  id: verificationMethod
                }
              });
              response = _extends({}, methodResponse);

              if (response) {
                _context7.next = 14;
                break;
              }

              throw new Error("Verification method " + verificationMethod + " not found.");

            case 14:
              if (!(response.revoked !== undefined)) {
                _context7.next = 16;
                break;
              }

              throw new Error("The verification method has been revoked.");

            case 16:
              return _context7.abrupt("return", methodResponse);

            case 17:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    function getVerificationMethod(_x9) {
      return _getVerificationMethod.apply(this, arguments);
    }

    return getVerificationMethod;
  }();

  _proto.verifySignature = /*#__PURE__*/function () {
    var _verifySignature = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(_ref9) {
      var verifyData, verificationMethod, proof, key, verifier;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              verifyData = _ref9.verifyData, verificationMethod = _ref9.verificationMethod, proof = _ref9.proof;
              _context8.next = 3;
              return Ed25519VerificationKey2018.from(verificationMethod);

            case 3:
              key = _context8.sent;
              verifier = key.verifier();
              return _context8.abrupt("return", verifier.verify({
                data: verifyData,
                signature: proof.jws
              }));

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    function verifySignature(_x10) {
      return _verifySignature.apply(this, arguments);
    }

    return verifySignature;
  }();

  _proto.verifyProof = /*#__PURE__*/function () {
    var _verifyProof = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(_ref10) {
      var proof, document, purpose, documentLoader, expansionMap, compactProof, newProof, verifyData, verificationMethod, verified, purposeResult;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              proof = _ref10.proof, document = _ref10.document, purpose = _ref10.purpose, documentLoader = _ref10.documentLoader, expansionMap = _ref10.expansionMap, compactProof = _ref10.compactProof;
              newProof = JSON.parse(JSON.stringify(proof));

              if (!newProof["@context"]) {
                newProof["@context"] = document["@context"];
              }

              _context9.prev = 3;
              _context9.next = 6;
              return this.createVerifyData({
                document: document,
                proof: newProof,
                documentLoader: documentLoader,
                expansionMap: expansionMap,
                compactProof: compactProof
              });

            case 6:
              verifyData = _context9.sent;
              _context9.next = 9;
              return this.getVerificationMethod({
                proof: newProof,
                document: document,
                documentLoader: documentLoader,
                expansionMap: expansionMap
              });

            case 9:
              verificationMethod = _context9.sent;
              _context9.next = 12;
              return this.verifySignature({
                verifyData: verifyData,
                verificationMethod: verificationMethod,
                document: document,
                proof: newProof,
                documentLoader: documentLoader,
                expansionMap: expansionMap
              });

            case 12:
              verified = _context9.sent;

              if (verified) {
                _context9.next = 15;
                break;
              }

              throw new Error("Invalid signature.");

            case 15:
              _context9.next = 17;
              return purpose.validate(newProof, {
                document: document,
                suite: this,
                verificationMethod: verificationMethod,
                documentLoader: documentLoader,
                expansionMap: expansionMap
              });

            case 17:
              purposeResult = _context9.sent;

              if (purposeResult.valid) {
                _context9.next = 20;
                break;
              }

              throw purposeResult.error;

            case 20:
              return _context9.abrupt("return", {
                verified: true,
                purposeResult: purposeResult
              });

            case 23:
              _context9.prev = 23;
              _context9.t0 = _context9["catch"](3);
              return _context9.abrupt("return", {
                verified: false,
                error: _context9.t0
              });

            case 26:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[3, 23]]);
    }));

    function verifyProof(_x11) {
      return _verifyProof.apply(this, arguments);
    }

    return verifyProof;
  }();

  return Ed25519Signature2018;
}();

exports.Ed25519Signature2018 = Ed25519Signature2018;
exports.Ed25519VerificationKey2018 = Ed25519VerificationKey2018;
//# sourceMappingURL=ed25519-signature-2018.cjs.development.js.map
